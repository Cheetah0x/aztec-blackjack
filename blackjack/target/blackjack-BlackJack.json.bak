{"noir_version":"0.36.0+b0cbf84eaf69f77628939184c9b869cfb3e15846-aarch64","name":"BlackJack","functions":[{"name":"player_hand","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"CardNote::CardNote::Hand","fields":[{"name":"cards","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"kind":"struct","path":"CardNote::CardNote::Card","fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}]}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"bust","type":{"kind":"boolean"}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["player_hand"]},{"name":"initialize_deck","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/8VY30/bMBB22qQ/6ag2TdqkScvzpEmphgBp0lY0sUfQhDSeC0m3jEKqEH5sD1P2n69mPvr1egkwYjipOsf+/N35fGcbHDUXx2hPFYgGuKpcGoxMy6rQ3kkyPz6Js3g0iX9FIcK3of3S6K00Hf2cTQijSz85y/xk7B8kZyfhKU7cgfYro0dZFh1PMz9L/FEY+hdx9t1PzqN0PEkucO7X/zV6cA+jP6D9xOi9bHR4NJuZ+GEUTa/j+MfottE1o/V4ffYbmu/gfjJoA2/V/JvB2ru2WpSK/b/idyz5r4X4LcU/aBqeT/mcH9dCdlvmp+UZ4BWMj017Zfbrm/bo/Hh3epiE0VYYptHpQirzdZXJXTjrd+B8wTl3ziaTeBxH6fZlfJotcbsCN7VrrK9W4Bf2o0h7rWVodHA/GXhsDX1mt858rchu8JStE231lBwr+34NNhxmT6nl3EH7HWW1FgcOs0f+8PjUWHzwjhxW48v1uePZif26w/hxrdymFsqThjBGXHSWecCFeA/ih3hs03zse210X+B0mQ8Ntbwe7KO90310768K66kxXikn6gJvX8k5qqUnzHMKtFLyOcrtSD7bvbMGa3Zz89+bRMq1ivgD2geMOdnS+g30F+W1dEfzvP0CnG9Nm3LNZWvDfcNaGFay5kHUMzz1fG7XBbta3NxGvAcb+m0yMVwU+xas0QO7Dvij1DzeiOe12RHw+K7lNdOBsSYbw3pqQXws1tM6v2eVqq6Wbsr19yyWlBO3zXXCfwTOD6bdBQ5+TqPwM5rvA+Ypvzds3IntG2LQZDEg/GfmZ8eKn/J7Dm3xM+Q2NSTVXJNhtEjnF83V7/nnpn39nt/LknT0LdpP4yxSTPijkyeBK+AUwyAOnccN8xgeC0DCYxEgftdou4kobzDZ6pX4iwW9WuAj+t+24v+8kDoQRynObRZnwu8zP7tW/JTj3IU4a8ELswl+aXFzK/F79AuT9ki6MPlBLh00ZbVHdopqr+hwPTT6MQ/XskdCr2Qt+Ki0mTsbm0FA9ilvPbX4sFDMvsfwRw/gpxRntKVrkP5x3Mjn41iLWprm21XzNSIeHyuInxJ29ktNm+rdE+xpXF6Ccwr0FYfQ5+aLfe18GV/Pl/Fku5Mv+0hjXRjDc0LLivnGeCEX+eEx/G/zTXvSgjk0vy/YbzH7C34Lffwfb10B3xXwen8uiM9oXHuVf5xiLug8/QslONdGUhkAAA==","debug_symbols":"1ZvRbuowDIbfpddcJHacxLzK0dFUNpgqVWUCNmlCvPvCRkvXMXMDk32DWvjVfE1DvtRV99XTcvH6/NB0q/W2mv/bV+36sd41667s7Q+zarFp2rZ5fhh/XbnjB3/Gty91d9zb7urNrpr7yG5WLbunspmcKwdYNe2ymic6zH6GnaM+7ICGsCe+kMaM/aHLJg9pThfCEUM8hSNGGIf/zyrvbsCeoQ8X+D9k9zdgD37o93it3z3k0KcxOJk9RUincIrJTdnhpuzefWc/toB3byHcvQW6ewvxYgtMQwuc8EoLOFxoj3QO++wvpIkdn9LEEOQxFAD6ARcAz+EEn+zJMHs2zM522cEZZveG2cEwOxpmD4bZyTC7Ya+CYa+CYa+CYa+iYa+iYa+iYa+iYa+iYa+iYa+iYa8G3f9Vgr7WFCjQlF33mKE49DuNOb7YdY+Z6Id+j+EHu+61mMyuey0ms+tei4nspHstJrPrXovJ7Lrnd5ld91pMZg+G2f98nsmpf1pFma+wUxy8WjZpHC7sEVWzp/NFSp6n7EF3v3MQ2El3v4Mf2HH63C9Gw+zJMHs2zK57jhTZkzPM7g2zg2F23V6N2Z3ZvRzm4PsT5VJgmJ6ocgn/eqJHdt0Sltl1S1hm1y1hmV23hEX2rPvGXCxeZuWFV6l4mXXfmMvswTC74YJ31l3wltl1F7xldt0Fb5ldd8FbZGfdBW+ZXblXRXbDXmXDXmXDXmXDXmXDXmXDXmXDXmWzXj2Uvbd609SLdnl6BWz12j2O3gjbvb98/VLCHw==","brillig_names":["initialize_deck"]},{"name":"begin_game","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["begin_game"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"databus"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+2dB3QUxR/HN5sECYggxUoJ0vu1JBdq6E26CiLtcneBQEiAnIAoGlBBsdCtKE2l2nvvvffee+9d8f/9hd0/k2WpmY35vue+93m3u3c39/nNzs7s3u7OJBnbp9tMwygxt88ngWTrVValO9bZr+p8qsvnqrusq+GyrqbLuoNd1h0CchzrGrp8rpHLunSXdY1d1jWz1qlTkvWaY70GfZmhUDwrEPcH/RFfIDs3nOELZeRmhv1hf0Y4IxYIB4PxcCiclZ2bneXL9oeCcX9eRnYwz7d9qm/uSMtXrikQ9dKzgTZPn89Lz4b77xlwrhC3OiBFcZXttc2ab27smG+grG9ozdvfa4TldNAYHGXuWG9PpiMPfOWb/M005mcTfdvdr+5bkm66sb2uUMvB7sqGr3xT6e9rSsuXpDjWsuabIqZmoDloAVqCVqA1aAPagnagPegAfMAPAiBoWpmRrBQILzOjtUc7tKHXM6DmRchayDCNsjW1vPG3Y518yFmqkj3MxP3d0+J526eQqW+vzfBo4+quqXTGnKmk5Q8HA4GsoHwuHMPPxKKBcCAQyw35or5INBDPDvmz80KBUDAai+YizYg/z5cXiWbnhbd7yY6YYlRMrZRp6q+VZMoyPRTOMvWnG9ZYGLyKO6xUR5rSdXXVUQGETf3pZmsurHZlLelWdAvYjrAF7GgtdHK2gB1dWsBOFdACttPYAnbUWAF0ImkBdcbcmbQF7OxRC9jF9FC4iwctYNdK3gJK3F1JWsBOlqvudLt51AJ2+xdaQB9hC5hjLXR3toA5Li1g9wpoAX0aW8AcjRVAd5IWUGfMPUhbwB4etYA9TQ+Fe3rQAvaq5C2gxN2LpAXsbrnqTre3Ry1g73+hBQwStoB9rIW+zhawj0sL2LcCWsCgxhawj8YKoC9JC6gz5n6kLWA/j1rA/qaHwv09aAEHVPIWUOIeQNIC9rVcdac70KMWcKC5c6un2/1obe7+XC89B+2/Z8i5wu1CvuSDfcG+qTLfQpkfZJa9kD8Yy0PAUDDM3PlCvu6GtZm+cuYfrLFeGa65/Du3zXBlGwxR5ocq88Mc22YElo8Bx4LjXLaN7vI5cv/zILg3eaCWz+bK/AhlfqQjD0Zh+XgwGpxQAXkwRls5CIa89By7/54x315sqzHKNmmpzLdS5sc6ttU4LI8HE0CkAuoSjbcE+MdprEtyPTpI151/bTTm33iN+Rclyb+2GvNvgsb8i3ncluUqdUBUmY8p8xFH3RDHch6YCCZVQN2g8WKpP65x2+STlO32GvMvT2P+TSbJvw4a82+ixvyb4nHdkK/UAZOV+SnK/CRH3VCA5amgEBRVQN2g8TKSv0DjtplGUrb9GvNvqsb8m06SfwGN+VeoMf9meFw3TFPqgOnK/AxlvshRNxRjOQFOBDMroG7Q+Ae7v1jjtpnl8baZpWyDhDJ/ojI/07FtZmP5JDAHnGx6f25+ir48yHPLg1OUWGcr86N28//EXCyfCk4ztz9gJutTrc9WxEWGuRrLhal4zrMW5ptG2atv8kaJY918a5066d4x52rcmebtfVrRPaTln69xA0jBMQ33y8TGPubnnrwNDwvlPM2VlT2d7iyMsmJPl4J1FpY9uPr38L7vdI2F+AxTW2Eoc8XmjL3YmcvrPl9jPujM0zP3IU/39Ftqnp6pVJppSn6qeeor3+Tftvv0AtE8fzAjnpXhy4yEMmKZwUAskOWLhTLy/BAOZIeQNXnRUDgWDgTzAlmB6Da9fqVlzK7Y7IbEblXnW/ML8LoQnGVW7D0zZ3l05qB5G5e5Z+Zsa2GRs1KUN5z3zCzai4rSV76pTCaW956ZszXu1Is82rim5vzTGfM5Juc9M+d4dORwrumh8Lmm/nTP01gYvIr7PKU60pSuJ/fMLLJcdad7vubCalfWkq6z1fPy2l9582GBxrQWaz6dqqiKa7HpTcW1xPRQeIkHFdfSSl5xSdxLPaq47MnLC83lzdOFGtNaRrqzLvNoZ11ueii83IOddUUl31kl7hVkO+sCs3JWpis1F/pq1vZeqZzHL1Tml5o7/gVvo6xvq8zbj/NfgNcLwUXWsp32gl2kvUhJe0+fuRivl4BLTW/2zaVWGdV9dLlK82mrbj+v4r5M4/5jKJOp2XORxn3zcs0x6/5rQvZPndtF9slVHpSd1aY3bYTustNJY9lZU8nLjtT9Gv+C88u+stqDsrNWc9nRnY9SZnQeW0i5WetBPiYZ3uyDuj3X6cvLmNvdBOuUYxEpC/Z8I3PXdxOsx/IV4Epwlel9t5otNNZD60lPBjU+kVTmZHCD6aHwBg9OBjdW8pNBiXujuSODNaXr6cmgmlZ587SZxu2ziXRn3eTRzrrZ9FB4swc765ZKvrNK3Fs82ll1HwlstFx1t64bzcq7ve1Jd8xNNHpu1Zh/6vU1STfdKDvpPsPTmactDG8aO90xazzy97ckidnUGHMrkpiTNcbcuoJi9pVv8rfRmH+NTG9i1t2GtzU4PNuReLYn8exA4ukj8fSTeAZIPIMkniESzwwSz0wSzywSzzCJZzaJZ0cSz04knp1JPLuQeHYl8exG4plD4tmdxLMHiWdPEs9eJJ69STz7kHj2JfHsR+LZn8RzAInnQBLPo0k8B5F4DibxHELiOZTEcxiJ53ASzxEknseQeB5L4nkciedIEs9RJJ7Hk3iOJvE8gcRzDInnWBLPcSSe40k8J5B4Rkg8c0k8oySeMRLPOIlnHonnRBLPSSSe+SSek0k8p5B4FpB4TiXxLCTxLCLxnEbiOZ3EcwaJZzGJZ4LE80QSz5kknrNIPGeTeJ5E4jmHxPNkEs9TSDznknieSuJ5GolnCYnnPBLP+SSep5N4nkHieSaJ5wISz4UknmeReJ5N4rmIxPMcEs9zSTzPI/E8n8RzMYnnEhLPpSSey0g8l5N4riDxXEnieQGJ54UknheReF5M4nkJieelJJ6rSDwvI/G8nMRzNYnnGhLPtSSe60g815N4XkHieSWJ51UknhtIPDeSeG4i8dxM4rmFxHMriefVJJ7XkHheS+J5HYnn9SSeN5B43kjieROJ580knreQeN5K4nkbieftJJ53kHjeSeJ5F4nn3SSe95B43kvieR+J5/0kng+QeD5I4vkQiefDJJ6PkHg+SuL5GInn4ySeT5B4Pkni+RSJ59Mkns+QeD5L4vkciefzJJ4vkHi+SOL5EonnyySer5B4vkri+RqJ5+sknm+QeL5J4vkWiefbJJ7vkHi+S+L5nkeepsOzMo1L/X4Fxewr3+T/QGP+qWO6+8o5GR6Wxw8NDs+PSDw/JvH8hMTzUxLPz0g8Pyfx/ILE80sSz69IPL8m8fyGxPNbEs/vSDy/J/H8gcTzRxLPn0g8fybx/IXE81cSz99IPH8n8fyDxPNPEs+/SDz/JvHcRuL5D4mnJMjgmUTiaZJ4JpN4ppB4ppJ4ViHxPIDEsyqJZxqJZzUSz+okngeSeNYg8TyIxLMmiWctEs+DSTxrk3jWIfGsS+JZj8TzEBLPQ0k8DyPxPJzE8wgSzyNJPOuTeDYg8WxI4tmIxDOdxLMxiedRJJ5NSDybkng2I/FsTuLZgsSzJYlnKxLP1iSebUg825J4tiPxbE/i2YHE00fi6SfxDJB4Bkk8QySeGSSemSSeWSSeYRLPbBLPjiSenUg8O5N4diHx7Eri2Y3EM4fEszuJZw8Sz54knr1IPHuTePYh8exL4tmPxLM/iecAEs+BJJ5Hk3gOIvEcTOI5hMRzKInnMBLP4SSeI0g8jyHxPJbE8zgSz5EknqNIPI8n8RxN4nkCiecYEs+xJJ7jSDzHk3hOIPGMkHjmknhGSTxjJJ5xEs88Es+JJJ6TSDzzSTwnk3hOIfEsIPGcSuJZSOJZROI5jcRzOonnDBLPYhLPBInniSSeM0k8Z5F4zibxPInEcw6J58kknqeQeM4l8TyVxPM0Es8SEs95JJ7zSTxPJ/E8g8TzTBLPBSSeC0k8zyLxPJvEcxGJ5zkknueSeJ5H4nk+iediEs8lJJ5LSTyXkXguJ/FcQeK5ksTzAhLPC0k8LyLxvJjE8xISz0tJPFd55Gk6PMs7bnUzjTFfVkEx+8o3+S9P0pd/W02O8riaZL9ZQ+K5lsRzHYnnehLPK0g8ryTxvIrEcwOJ50YSz00knptJPLeQeG4l8byaxPMaEs9rSTyvI/G8nsTzBhLPG0k8byLxvJnE8xYSz1tJPG8j8bydxPMOEs87STzvIvG8m8TzHhLPe0k87yPxvJ/E8wESzwdJPB8i8XyYxPMREs9HSTwfI/F8nMTzCRLPJ0k8nyLxfJrE8xkSz2dJPJ8j8XyexPMFEs8XSTxfIvF8mcTzFRLPV0k8XyPxfJ3E8w0SzzdJPN8i8XybxPMdEs93STzfI/F8n8TzAxLPD0k8PyLx/JjE8xMSz09JPD8j8fycxPMLEs8vSTy/IvH8msTzGxLPb0k8vyPx/J7E8wcSzx9JPH8i8fyZxPMXEs9fSTx/I/H8ncTzD488TYdneZ+DTtEY858kMadqjPkvkpiraIz5b5KYD9AY8zaSmKtqjPkfkpjTNMYscgwxV9MYcxJJzNU1xmySxHygxpiTSWKuoTHmFJKYD9IYcypJzDU1xlyFJOZaGmM+gCTmgzXGXJUk5toaY04jibmOxpirkcRcV2PM1Ulirqcx5gNJYj5EY8w1SGI+VGPMB5HEfJjGmGuSxHy4xphrkcR8hMaYDyaJ+UiNMdcmibm+xpjrkMTcQGPMdUlibqgx5nokMTfSGPMhJDGna4z5UJKYG2uM+TCSmI/SGPPhJDE30RjzESQxN9UY85EaY5br4nJPwM/WjQEtQEvQCrQGbUBb0A60Bx3kN4EfBCRfQAhkgEyQBcIgG3QEnUBn0AV0Bd2sfOgOeoCeoBfoDfqAvqAf6A8GgIHgaDAIDAZDwFAwDAwHI8Ax4FhwHBgJRoHjwWhwAhgDxoJxYDyYACIgF0RBDMRBHpgIJoF8MBlMAQVgKigERWAamA5mgGKQACeCmWAWmA1OAnPAyeAUMBecCk4DJWAemA9OB2eAM8ECsBCcBc4Gi8A54FxwHjgfLAZLwFKwDCwHK8BKcAG4EFwELgaXgEvBKnAZuBysBmvAWrAOrAdXgCvBVWAD2Ag2gc1gC9gKrgbXgGvBdeB6cAO4EdwEbga3gFvBbeB2cAe4E9wF7gb3gHvBfeB+8AB4EDwEHgaPgEfBY+Bx8AR4EjwFngbPgGfBc+B58AJ4EbwEXgavgFfBa+B18AZ4E7wF3gbvgHfBe+B98AH4EHwEPgafgE/BZ+Bz8AX4EnwFvgbfgG/Bd+B78AP4EfwEfga/gF/Bb+B38Af4E/wF/gbbwD9AdrgkYIJkkAJSQRVwAKgK0kA1UB0cCGqAg0BNUAscDGqDOqAuqAcOAYeCw8Dh4AhwJKgPGoCGoBFIB43BUaAJaAqageagBWgJWoHWoA1oC9qB9qAD8AE/CIAgCIEMkAmyQBhkg46gE+gMuoCuoJtcawfdQQ/QE/QCvUEf0Bf0A/3BADAQHA0GgcFgCBgKhoHhYAQ4BhwLjgMjwShwPBgNTgBjwFgwDowHE0AE5IIoiIE4yAMTwSSQDyaDKaAATAWFoAhMA9OBjGkv48XLWOwyzrmMIS7jc8vY1zKutIzZLOMhy1jDMo6vjJEr48+WABk3VcYklfE+ZSxNGadSxoCU8RVl7EIZF1DG3JPx7GSsOBmHTcY4k/HDZGwuGfdKxpSS8ZpkLCQZZ0jG8JHxcWTsGRnXRcZMkfFIZKwPGftCxpWQcRbWABkfQPrel37tpc946Y9d+jqXfsSlj27p/1r6lpZ+m6VPZOlvWPrylX5ypQ9a6d9V+k6Vfkmlz0/pT1P6qpR+IKWPRem/UPoGlH73pE876S9O+mKTfs7uA9I/l/R9Jf1KSZ9N0h+S9DUk/fhIHznS/4z07SL9pkifJNLfh/SlIf1USB8Q0r+C9F0g/QLIM/fyPLs8Ky7PYcszzvL8sDybK8+9yjOl8rymPAspzxnKM3zyfJw8eybPdckzU/I8kjzrI8/RyDMq8vyHPFshzy3IMwFyv73cyy73ics92HJ/s9w7LPflyj2v0n7KvZpyH6TcYyj378m9cXKvmNw7JfcSyb01cq+JHFzIvQhybV6uVcu1W7mWKdf25FqXXPuRayFybUD+K5f/juW/VPlvUf5rk/+e5L8Y+W9CztXl3FXO5eTcRo715dhXjgXl2EiOFcztVY4hbb1MLYwdk6VjJFvvyz1jcg+V3FMk99jIPSdyD4bckyDX6OWatVzDlWuaco1PrnnJNSC5JiLXCOQ/c/kPWf5Tlf8Y5T83+Q9K/pOR/yjknF3OYeWcLh00BnIMLMeEcowk4700N3aeqivztZX5+tZrJJGIT52WSE8UpUdisfRZ+YlJ6UUz4zPyCoqkSS49LrCnI63XaKSgoPQLxcXxGYnxUyOzx+fmJ8YX58+Ro4HSw4h9/MrYff/K+H3/ymnKV46yXvsX5ifyIwX5cyKJ/KLC9EmR4knpsaJ4cXphUSJ9aiQRlYOa0qMLe/I5vxmfIVk3I15cnJ6//XuJSfH0aFFhYkYkmkiPxacVFJ0Ul4Oe0qOTfdkCUsrqWJ9rqXz3IOt1RCISnYJvFuFX4lK9lh7LydRgrz492pGBu/50aQGXqbX1mma92gf8kpzsDDl2NpXzYD1NSVd3+mFfRijNKDtp9g+mGTsqCa/yx07Tg/RLb46UqWfJjvSdschUw1pOUvLS/o5UhLWU76hpGFYazu/a73sZX9gXCtnpp3iQPjZP6U1KpTGW7Jx/9nspJWV/W30vVXnPdpT8PNyal2qhl/WZWsr7TZV0nPmdVAF5i9j9SY7fMxy/ZTh+v5rh7b6S5Pg928eZP/b8gcaOandiPNHTqsr7FxYnIoXRuBqCmmwtlxDVLHD7jPNzzs/XcHnf1qyurD+gxCgTWumrss4uTnbxqqp+3vFemvJeSklZr2rWcoryO2patkeq4/NNrOWa1msV5Tv292u5/H4Vx++X8XZZpxYhZ1rJLuvsz8uxm90iS77azUNKyY70dBXJrLDPZ/vZeZ9qlC2ehuP3Ux2fb2XH4qGnTLV34yT51MjhwXk4EMr873Bg95Ouw4Hqyudk6qWkl+R4r7fLb6nNnr1ObRaTXfJBLTMpxs5Vv7NpMHaRhlsdnGbsHG+O9erbt8nvXKE67yk2+71UR6xucavfTzV2jjvVkb7zEMlw+Y3kXXzXLV1zN3Hs6bvOwyjndrR9GOrwhtbyv12HN3B4/FeHu05Bj+vYgLenJO51uBqL/bu7q8PdTit6We+51e9qHW6nV8ex3v7uoUqaqk+qsev6N9XxWbusy/FczV2kV2U36dnxJe/ie/Ws+TTD/bg9x3r1lW/yu3kkuXi4nR/Y32GoA+sr+emVp0x7qgOrOjyqGZ54BOz0q3uT/v/3cXWqpsxXd7xnl/sUl+8l7WLZdLzu7rPO9eq6Gi7vqcd5znVpjte6SnpetFP1vEnfdRvVVebrOeJU8zlHk4Odnr2vpro4mY73/n++7fDTcOzrnPxOl2SX37IntazY7/8Psp73D/3WAQA=","debug_symbols":"7V3Rbts6DP2XPPdBpCiJ6q9cXAxp1w0BgnRouwtcFP33KV4lK7UTNYiTqLT2MNQto/CcY8uHtGW/Lr4/3P3++W21+fH4vLj953WxfrxfvqweN2HrdQG6+93zr+Vmu/n8snx6WdyC9epm8bD5Hn50Sr3dLH6s1g+LW2febgbByJreg5GNTcFg1Ui0NmDeo7VhLkRD+BcHDz9iH68Rx+KZbQz3yvTRNDo4+jS24zz435sFUGNmDzOmMbOHGduY2cOMO5kZUhixkrKQgj13X8Dn/gJ/urZoIp+InGlr/Ei0oxjsuOceNG6zQXXpbKDPxu5kMzKyQowjE/VpaBiLJnCJdvA22ydVhxRmgxRng1TPBinNBqmZDVI7G6RuNkh5Nkj9XJBqQR6JVEyaCGGAVJBHKiAV5JEKSAV5pAJSmg1SQR6pgFSQRyogFeSRCkgFeaQCUkEe6TBSEuSRbN++szRwgyTIIxWQCvJIBaSCPFIBKc0GqSCPVEAqyCMVkArySAWkgjxSAakgj3QYqRHkkZjiRVpiN3CDRpBHKiAV5JEKSAV5pAJSmg1SQR6pgFSQRyogFeSRCkgFeaQCUkEe6TBSe2mP5NnFkZUqQnWK49CcDT0OFRDTXXLoKYu2I9HWxEQ4v0UOxiCCsjrdUacs+YzG0UwoSQREGenH34BnoQlUt0DYBKpbIN0E+pRATvcCsSsJNN09xpaaQHULZAQJBL1Aeof0MYHA9NOQ9VCKvqJEtklUu0Suaoks6SSRdwWJ0KeZC73TWbQeidYAUX4dSpadGqQuq8BNotol8k2iyiVydfcUmkRBorq7Ck2iIFHdfYUmUZCo7s5CkyhIRE2i2iWqu7vQJAoS1d1daBIFiVp3oXqJWneheolad6F2ibh1F6qXqHUXqpeodRc+K9G1rhdx6y5ULxHJkUgrFa+6hkunpiDRNUkX1C/4OqQL6gBoTE9T1Gi4QHqYgCIvSBnlSEXG+3kOTUeioBr9nCR6YxKJ2Z6Iow9/tBEi+Yxv2/EtqOA+I9+oFMRghXQC34Kq53PyDZASAe0/TBJeUH17ThJDdI9RH95pQfcYKTsRvjMuqFz9IowLqj6rYdzo5A1N9gDqo2dxL6julCcONXGmFyc9jjJwcILf9JIqU3HiSKpgwdteHF8QJ7SKY9uYKGunjYqjXeJQM+g8eEuipAr2jCSyjxWV9kMSJZWlVyNRUq15LRIDksbiBCxKKiCvx6KkovB6LEqq3q7HIjUWJ2BRUj10PRZb4TIFi1IrF1u6myJMZgmjyp4ANMqiAR9rcxM6AAMWpZYul2VRau1yURZBau1yWRal1i4Ts4jprY4GrR2wKLV2uSyLUmuXy7JIjcUJWJRau0zMonXRdRsHBYvu+tvdneWBRQephU7FlLeq6FOUMyTK2eBplLcS6gyU+4jROYAB5a3eujTldb/nHPrVKCGPHca75Kt+nUIp+XYZ5XPtwpSIZuMG+2+7jDIFi3RFFsHtsNjlM4Gp14keDOgL+WB/N00QSheir7i+B6Z4ObpUaiYwyTqdLZEId8B2XzGBKTRpKRka9AU+jfMmnetB7cwJXUK+soSmeCn4tAlNYBJMqhTQOFc6BEBneykNE8LaEtK1JUS1JWSm2Kl1nxAPZpYJXujMEEFw9tCBPUdNP++afAHk9s7dkXO7wv7krozJw7vk3VdNPmzcPa3W69XPb+vH++XL6nHzvP2w2v433nUx6anXxsLAuvDxH/FHf2S8ajv8ETj+I3jkR8IWdLyNz3Aqla2g9M5So5FKK50CHGAe2u1u5x2eTh8+rSJx9HHd4J6G9XHDY2pcfVy7vKc5O9nw7vThOR7pLiuJ3ofn8w7vTx6e02TC9HHP2dNMOW74aGZ4d/nR3kP4uOFdlJYH5CBOOLz/cFiFDTwwNYBKD8wBxZ87YoDSghOwhaVarEw8FbFyu0tO3sLWf8un1fJu/bCd+7d//L25j6eCsPny/6+/fwnBfwA=","brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]},{"name":"view_deck","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"CardNote::CardNote::Deck","fields":[{"name":"used_cards","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"deck_seed","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"5Z3dTuMwEIXfJde98M+Mf3iV1QoVKKhSVRCUlVaId9+04LSk1VhlA5pjblBCJ8l3Yo/PJKrdl+5mcfV8d7lc394/dRe/XrrV/fV8s7xf93svr7Pu6nG5Wi3vLg//3ZntH5t28U8P8/V292kzf9x0FzZkM+sW65t+MxrTn+F2uVp0F5FfZ8fBxnAJNo6HYMv5RLRPvpy638xDdI4ngoOn8B4cfHCHwb9nnc0TsCdXgnv472N3ZgJ2ssN9D7X7bl2iEu3JyOwxuPgeHEM0Y3Y7Kbs1H9m3V3BffgX/5VegL78C//cV2NrSK9j6Wq9wOZVe4Z0d94pwJs32mPiJY9InjsnnH+PNJ445mRnOpdKMzhtfaXNLfmjzkPZtnuyp9mNTEpXZJbn92HEZ7PpNP2o/74DZPTA7AbMzMHsAZo/A7AmYPeOykwFmB/ZVAvZVAvZVAvZVAvZVAvZVAvZVAvZVAvZVBvZVBvZVVp6rMQ/safwGLSjvM7m80GVvxu95wrf3GcpDN2DyMjulUE5N6eC+R7djd8DsHpidgNkZmD0As0dg9gTMnnHZowFmB/bVCOyrEdhXI7CvRmBfjcC+GoF9NQL7agT21QTsqwnYVxOwryZgX03Avpp0j5GZy7slypFG7Fl1rrKzaXinRzxmV52rFXbVuVphV52rFXbVNbDMbo3uZN1/K5mNpSN43dlagdedrhV43flagdedsBV41U+tNXjVj601eNU1WQ1e9YMrG7+H5zCGt6qfXGvwysf5XCa4cJ+eR/DKx3kZXvk4L8PrHuetG74ZYenDaHN2CWp1m8I5SkOy5cwhuf3csreZbla3gUwoVLfZTCfU6TamCYXqfkycUKjuR8oJheouSyYUSg0JHd4Zh5R4LFR3uTOh0HZKo4rQliojUWhLlZEotKXKSBLqW6qMRKEtVUai0JYqI1FoS5WRKJR+itCfUhn5hiqjbIaiPtsjoQ1VRrLQhiojWWhDlZEolBqqjGShDVVGstCGKiNZKIEK3cGjFgE7eFRj38GjmvUOHtWAt/Dap4ZL06st615zxfuhmTwdrWrJuhdd8TZK8KQb3tAevpIg2Q+Glr3nI6XK12iR5vBbVr5IiwyvfOUHGV75Mi0yvPJ1WkR45EU3bFBuxzK88iXQZHjla6DJ8LrtuAKP7LAB2WEDssMGZIcNyA4bkR02IjtshHXY137vz/xxOb9aLd5/reL2eX198OMVm78Pb5/0wf8A","brillig_names":["view_deck"]},{"name":"player_hit","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["player_hit"]},{"name":"player_stand","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["player_stand"]},{"name":"player_double_down","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["player_double_down"]},{"name":"view_player_points","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["view_player_points"]},{"name":"view_dealer_points","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["view_dealer_points"]},{"name":"dealer_hand","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"CardNote::CardNote::Hand","fields":[{"name":"cards","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"kind":"struct","path":"CardNote::CardNote::Card","fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}]}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"bust","type":{"kind":"boolean"}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"7Zzdbts4EIXfxde54N/wJ6+yWBRJmxYGAqdI3AUWQd69shtRqmmQcMoEc4a9KexmJJ2PknUOaWueN1/ubn98+7TdfX142lz/87y5f/h8s98+7KZ3zy9Xm9vH7f399tun9X9v1OEfHY/1T99vdoe3T/ubx/3mWvukrjZ3uy/Ty6DUtIev2/u7zXWgl6uyWCmai5WhXKwpnam20c67nl6mXJ3CmWJvnX8t9tabdfG/VxudOmiPZi6exH+cdqM6aHc6j7tvjbs20c3V1qm69uBNeC0OPqhT7bqrdq1+1344gnn3I9h3P4J79yPQHx+BtJ6vCtK2dVWYFOerwhp9elX4C9Uctglv2Ca+YZt0+TZWvWGbs58Mo8i+bmNUCI1zrp3N59zH5ZxHfe78kZo/qEQm1s8fGZpvdtNLe3L+rAHWboG1O2DtBKzdA2sPwNojsPaEq90pYO3AvuqAfdUB+6oD9lUH7KsO2FcdsK86YF91wL5KwL5KwL5KwL5KwL5KwL5KwL5KwL7qmV/vIWXt8XS12zMf9zR/+UJWna7J+g/PMy7ly4CcrWs33s3FxtPydUowR+0RWHvC1R4UsHYNrN0Aa7fA2h2wdgLW7oG1A/tqAPbVAOyrEdhXI7CvRmBfjcC+GoF9NQL7agT21QjsqxHYVyOwryZgX03AvpqAfTUB+2oC9tUE7KsJ2FcTsK8mYF9NwL6qFbCxagXsrFoBW6tWwN6qFbC5as37sglufnLCBAqFeNbRwC7PuFm1ek5mFs86G7TEsw4HLfGs04FVtIiPthDPOh40xBvW8aAlnvdEJMSYb5WpuFUa3jORhnjeU5GGeN5zkYZ43pORunjLezLSEM97MtIQzzxV1sXznoxEncVHpwvxDlk87/t8DJTFp7gWf0aH8kujhdAoNsnmPSdahsX4c5pVnPdMKqV18XEMedsNxhjydj2IMXS8zRdjDHlnAIwx5B1FMMaQeSKCGEP3dwz/eAx5r8BgjCHvhSCMMRQ0T9H5wbHpu6BiRuYEzSYapIIyf52UBCXz30hjQSooP0/LUlmHK9asSFDKbZAKyqINUieTlFxBKijXTWvfi47y3isofU3xq0YqKiNVSUVlpCqpqIxUI/WiMlKVVFJGWpqKa1/4qZeUkeqkkjJSndQJIk252bpRxVzGS8pIdVJJGalOKikjrUg1FaSCMpIxuZu7scVchnkbn46kzJv+9CQVlJHWpOUvcJg3FLqMVKeFtLj3Mm8/dOG919ZI3TCkojJSlVRURqqSispIVVJJ60h5z3rd2XMmlbSOVCVl3sCpJ6mkdaQ6qaSMFJc0mEpSQRnJqvxbEauLhM+88VT0LpMGVydt/HaFeZuqS0h91POefTSrR5t/gTKPSP1AmSekfqDMA1I/UOb5qBso8z5cHUGZp6N+oMzD0UWg3mbQSKegzLNRP1A3CqikZFQFlZSMqqCSklEVVFIyqoJKSkYVUMO8kVpHUEnJqAo6SDIyzJu5dQR1o4AOkoyMGiQZTRijgA6SjIwaJRnpUZKRHiUZMe9B2hF0lGSk3SigoyQj3t1qe4KOkox4d8HtCTpKMuLdXbcn6CjJyIySjMwoyci4UUBHSUbMO2t3BBWUjJLKv2FIugAVlIzqoIKSURWUeSfwjqCCklEdVFAyqoMKSkZ1UNTAcBSPGgKO4lGN/Sge1ayP4lEN+CD+4zsrU+72R7Tq9ndWPJkwP/471ap18VG8ZS3e5i5iZJ0pxDve4nWoiSfe4pVbxDc+IMlmQ0vWUkHqeX9AEmVSpQvxAVl8RBafgMV/fHPZnuI1snjmdlwXz9uOG+J523FDPG87bohHdlhCdlhCdlhCdliP7LAe2WE9ssN6WId9md79d/O4vbm9v3uatjn88cfu8377sHt9u///+6+/TMU/AQ==","brillig_names":["dealer_hand"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"14336010898202591232":{"error_kind":"fmtstring","length":16,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"determine_winner","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["determine_winner"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"3469988399892582431":{"error_kind":"fmtstring","length":20,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"BlackJack::player_double_down_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::player_double_down_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"BlackJack::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::constructor_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"BlackJack::view_deck_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::view_deck_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"CardNote::CardNote::Deck","fields":[{"name":"used_cards","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"deck_seed","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"BlackJack::initialize_deck_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::initialize_deck_parameters","fields":[]}}]},{"kind":"struct","path":"BlackJack::view_dealer_points_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::view_dealer_points_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":8}}]},{"kind":"struct","path":"BlackJack::begin_game_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::begin_game_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"BlackJack::determine_winner_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::determine_winner_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":8}}]},{"kind":"struct","path":"BlackJack::player_hit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::player_hit_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"BlackJack::view_player_points_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::view_player_points_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":8}}]},{"kind":"struct","path":"BlackJack::player_stand_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::player_stand_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"BlackJack::dealer_hand_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::dealer_hand_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"CardNote::CardNote::Hand","fields":[{"name":"cards","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"kind":"struct","path":"CardNote::CardNote::Card","fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}]}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"bust","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"BlackJack::player_hand_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BlackJack::player_hand_parameters","fields":[{"name":"player","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"struct","path":"CardNote::CardNote::Hand","fields":[{"name":"cards","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"kind":"struct","path":"CardNote::CardNote::Card","fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}]}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"bust","type":{"kind":"boolean"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"BlackJack"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"card_deck","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"player_hands","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000017"}}]}},{"name":"dealer_hand","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000018"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"24":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"72":{"source":"// CardNote.nr\npub mod CardNote {\n    use dep::aztec::{\n        oracle::random::random,\n        prelude::{PublicContext, PublicMutable},\n        protocol_types::{\n            address::AztecAddress,\n            constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n            traits::{Deserialize, FromField, Serialize, ToField},\n        },\n    };\n    use std::hash::poseidon2;\n\n    global MAX_CARDS_IN_HAND: u32 = 6;\n    global BITS_PER_FIELD: u32 = 255;\n    global TOTAL_CARDS: u32 = 52;\n    global FIELDS_FOR_DECK: u32 = 7;\n    global MAX_DRAW_ATTEMPTS: u32 = 5;\n    global BITS_PER_BYTE: u32 = 8;\n    global NUM_BITMAP_BYTES: u32 = (TOTAL_CARDS + BITS_PER_BYTE - 1) / BITS_PER_BYTE; // 7 bytes\n    global USED_CARDS_ELEMENTS: u32 = 20;\n\n    //-------------------------------CARD-----------------------------------\n\n    #[derive(Serialize)]\n    #[derive(Deserialize)]\n    pub struct Card {\n        pub rank: Field,\n        pub suit: Field,\n    }\n\n    impl FromField for Card {\n        fn from_field(field: Field) -> Card {\n            let value_bytes: [u8; 32] = field.to_le_bytes();\n            let rank = ((value_bytes[0] as u32) + (value_bytes[1] as u32) * 256) % 14;\n            let suit = ((value_bytes[2] as u32) + (value_bytes[3] as u32) * 256) % 4;\n            Card { rank: rank as Field, suit: suit as Field }\n        }\n    }\n\n    impl ToField for Card {\n        fn to_field(self) -> Field {\n            self.rank as Field + self.suit as Field * 65536\n        }\n    }\n\n    fn card_id(rank: u8, suit: u8) -> u8 {\n        (suit as u8) * 13 + (rank as u8) - 1 // Ranks from 1 to 13\n    }\n\n    fn id_to_card(card_id: u8) -> Card {\n        let rank = (card_id % 13) + 1;\n        let suit = card_id / 13;\n        Card { rank: rank as Field, suit: suit as Field }\n    }\n\n    //-------------------------------HAND-----------------------------------\n\n    pub struct Hand {\n        cards: BoundedVec<Card, MAX_CARDS_IN_HAND>,\n        bust: bool,\n    }\n\n    impl Serialize<MAX_CARDS_IN_HAND + 1> for Hand {\n        fn serialize(self) -> [Field; MAX_CARDS_IN_HAND + 1] {\n            let mut fields = [Field::empty(); MAX_CARDS_IN_HAND + 1];\n            //only serialize the cards that exist\n            for i in 0..self.cards.len() {\n                fields[i] = self.cards.get(i).to_field();\n            }\n            fields[MAX_CARDS_IN_HAND] = if self.bust {\n                1.to_field()\n            } else {\n                0.to_field()\n            };\n            fields\n        }\n    }\n\n    impl Deserialize<MAX_CARDS_IN_HAND + 1> for Hand {\n        fn deserialize(fields: [Field; MAX_CARDS_IN_HAND + 1]) -> Self {\n            let mut cards = BoundedVec::new();\n            // Correct: Loop only over the card fields\n            for i in 0..MAX_CARDS_IN_HAND {\n                let field = fields[i];\n                if field != Field::empty() {\n                    cards.push(Card::from_field(field));\n                }\n            }\n            // Deserialize the bust status\n            let bust_field = fields[MAX_CARDS_IN_HAND];\n            let bust = bust_field == Field::from(1);\n            Hand { cards, bust }\n        }\n    }\n\n    impl ToField for Hand {\n        fn to_field(self) -> Field {\n            // Serialize the cards array into fields\n            let mut card_fields = [Field::empty(); MAX_CARDS_IN_HAND + 1];\n            for i in 0..self.cards.len() {\n                card_fields[i] = self.cards.get(i).to_field();\n            }\n\n            //add the bust field\n            card_fields[MAX_CARDS_IN_HAND] = if self.bust {\n                1.to_field()\n            } else {\n                0.to_field()\n            };\n\n            // Hash the serialized data\n            poseidon2::Poseidon2::hash(card_fields, MAX_CARDS_IN_HAND + 1)\n        }\n    }\n\n    pub fn new_hand() -> Hand {\n        Hand { cards: BoundedVec::new(), bust: false }\n    }\n\n    //-------------------------------DECK-----------------------------------\n    pub struct Deck {\n        // Bitmask to track used cards\n        used_cards: BoundedVec<u8, 20>,\n        deck_seed: Field,\n    }\n\n    impl Serialize<USED_CARDS_ELEMENTS + 2> for Deck {\n        fn serialize(self) -> [Field; USED_CARDS_ELEMENTS + 2] {\n            let mut fields = [0.to_field(); USED_CARDS_ELEMENTS + 2];\n            // Serialize the used_cards vector\n            for i in 0..self.used_cards.len() {\n                fields[i] = self.used_cards.get(i).to_field();\n            }\n            // Fill remaining slots with zero\n            for i in self.used_cards.len()..USED_CARDS_ELEMENTS {\n                fields[i] = 0.to_field();\n            }\n            fields[USED_CARDS_ELEMENTS] = self.deck_seed;\n            fields\n        }\n    }\n\n    impl Deserialize<USED_CARDS_ELEMENTS + 2> for Deck {\n        fn deserialize(fields: [Field; USED_CARDS_ELEMENTS + 2]) -> Self {\n            let mut used_cards = BoundedVec::new();\n            // Deserialize the used_cards vector\n            for i in 0..USED_CARDS_ELEMENTS {\n                let field = fields[i];\n                if field != 0.to_field() {\n                    let card_index = field as u8;\n                    used_cards.push(card_index);\n                }\n            }\n            let deck_seed = fields[USED_CARDS_ELEMENTS];\n            Deck { used_cards, deck_seed }\n        }\n    }\n\n    impl Deck {\n        fn new(deck_seed: Field) -> Self {\n            // Initialize with all zeros\n            let used_cards = BoundedVec::new();\n\n            Self { used_cards, deck_seed }\n        }\n    }\n\n    impl ToField for Deck {\n        fn to_field(self) -> Field {\n            let mut card_fields = [Field::empty(); USED_CARDS_ELEMENTS + 2];\n            for i in 0..self.used_cards.len() {\n                card_fields[i] = self.used_cards.get(i).to_field();\n            }\n            card_fields[USED_CARDS_ELEMENTS] = self.deck_seed;\n            // Hash all card fields into a single Field\n            poseidon2::Poseidon2::hash(card_fields, USED_CARDS_ELEMENTS + 2)\n        }\n    }\n\n    //-------------------------------BITMASK UTILITIES-----------------------------------\n    fn is_card_used(deck: &mut Deck, card_index: u8) -> bool {\n        let mut valid = false;\n        for i in 0..deck.used_cards.len() {\n            if deck.used_cards.get(i) == card_index {\n                valid = true;\n            }\n        }\n        valid\n    }\n\n    fn set_card_used(deck: &mut Deck, card_index: u8) {\n        if deck.used_cards.len() < USED_CARDS_ELEMENTS {\n            deck.used_cards.push(card_index);\n        }\n    }\n\n    //---------------------------FIESTEL NETWORK-----------------------------------\n\n    fn feistel_network(seed: Field, input: u64) -> u64 {\n        let mut left = (input) & 0xFFFF_FFFF;\n        let mut right = (input >> 32) & 0xFFFF_FFFF;\n\n        // Round 1\n        let temp = right;\n        right = left ^ (feistel_function(right, seed, 0)) as u64;\n        left = temp;\n\n        // Round 2\n        let temp = right;\n        right = left ^ (feistel_function(right, seed, 1)) as u64;\n        left = temp;\n\n        // Round 3\n        let temp = right;\n        right = left ^ (feistel_function(right, seed, 2)) as u64;\n        left = temp;\n\n        // Combine left and right\n        let output = (left << 32) | right;\n        // Map output to 0..51\n        (output % 52) as u64\n    }\n\n    fn feistel_function(value: u64, seed: Field, round: u32) -> Field {\n        let value_field = value as Field;\n        poseidon2::Poseidon2::hash([value_field, seed, round.to_field()], 3)\n    }\n\n    //-------------------------------DRAW CARD-----------------------------------\n\n    pub fn generate_card(deck_seed: Field, draw_counter: u64) -> Card {\n        let card_index = feistel_network(deck_seed, draw_counter);\n        id_to_card(card_index as u8)\n    }\n\n    pub fn draw_card(deck: &mut Deck) -> (Card) {\n        let mut card_index = 0;\n        let mut unique_card_found = false;\n        let mut final_counter = 0;\n\n        // use first valid card found\n        for attempt in 0..MAX_DRAW_ATTEMPTS {\n            if !unique_card_found {\n                // Only process if we haven't found a card yet\n                let current_draw_counter = deck.used_cards.len() + attempt;\n                let current_card_index =\n                    feistel_network(deck.deck_seed, current_draw_counter as u64) as u8;\n\n                // Initialize used_cards if it's empty\n                if deck.used_cards.len() == 0 {\n                    unique_card_found = true;\n                    card_index = current_card_index;\n                    final_counter = current_draw_counter + 1;\n                    set_card_used(deck, current_card_index);\n                } else if !is_card_used(deck, current_card_index) {\n                    unique_card_found = true;\n                    card_index = current_card_index;\n                    final_counter = current_draw_counter + 1;\n                    set_card_used(deck, current_card_index);\n                }\n            }\n        }\n\n        let card = if unique_card_found {\n            id_to_card(card_index)\n        } else {\n            Card { rank: 0.to_field(), suit: 0.to_field() }\n        };\n\n        (card)\n    }\n\n    //-------------------------------CARD FUNCTIONS-----------------------------------\n\n    pub fn start_game(\n        deck: &mut Deck,\n        player_hand: &mut Hand,\n        dealer_hand: &mut Hand,\n        // card_deck_storage: PublicMutable<Deck, &mut PublicContext>,\n    ) -> (Hand, Hand, Deck) {\n        // Draw two cards for the player\n        player_hand.cards = BoundedVec::new();\n        dealer_hand.cards = BoundedVec::new();\n\n        //draw two cards for the player\n        let card1 = draw_card(deck);\n        player_hand.cards.push(card1);\n        let card2 = draw_card(deck);\n        player_hand.cards.push(card2);\n\n        // Draw one card for the dealer (face-up)\n        let dealer_card = draw_card(deck);\n        dealer_hand.cards.push(dealer_card);\n\n        (*player_hand, *dealer_hand, *deck)\n    }\n\n    pub fn player_hit_helper(deck: &mut Deck, player_hand: &mut Hand) -> bool {\n        // Draw a new card\n        let card = draw_card(deck);\n        player_hand.cards.push(card);\n\n        // Check if player busts\n        check_bust(player_hand)\n    }\n\n    pub fn dealer_play(deck: &mut Deck, dealer_hand: &mut Hand) {\n        // Dealer must hit until the hand value is 17 or more\n        //need to make this a loop without while loop\n        if hand_points(dealer_hand) as u8 < 17 {\n            let card = draw_card(deck);\n            dealer_hand.cards.push(card);\n        }\n    }\n\n    fn card_points(card: Card) -> Field {\n        if (card.rank as u8 > 1) & (card.rank as u8 <= 10) {\n            card.rank\n        } else if card.rank == 1 {\n            11.to_field() // Ace as 11 initially\n        } else {\n            10.to_field() //Face cards (J,Q,K)\n        }\n    }\n\n    pub fn determine_winner_helper(player_hand: &mut Hand, dealer_hand: &mut Hand) -> u8 {\n        let player_points = hand_points(player_hand) as u8;\n        let dealer_points = hand_points(dealer_hand) as u8;\n\n        let player_bust = check_bust(player_hand);\n        let dealer_bust = check_bust(dealer_hand);\n\n        //player wins = 0\n        //dealer wins = 1\n        //push = 2\n        if player_bust {\n            1\n        } else if dealer_bust {\n            0\n        } else if player_points > dealer_points {\n            0\n        } else if dealer_points > player_points {\n            1\n        } else {\n            2\n        }\n    }\n\n    pub fn hand_points(hand: &mut Hand) -> u8 {\n        let mut points = 0;\n        let mut aces = 0;\n\n        // First pass: Calculate initial points and count the number of Aces.\n        for i in 0..hand.cards.len() {\n            let card_point = card_points(hand.cards.get(i));\n            if card_point == Field::from(11) {\n                aces += 1;\n            }\n            points += card_point;\n        }\n\n        // Adjust for Aces if points exceed 21.\n        // Adjust for Aces if points exceed 21.\n        let max_points = 21;\n        if (points as u8 > max_points) & (aces > 0) {\n            points = points - 10; // Adjust one Ace from 11 to 1\n        }\n        if (points as u8 > max_points) & (aces > 1) {\n            points = points - 10; // Adjust second Ace if needed\n        }\n        if (points as u8 > max_points) & (aces > 2) {\n            points = points - 10; // Adjust third Ace if needed\n        }\n\n        // The above conditions effectively handle up to 4 Aces in a hand.\n        points as u8\n    }\n\n    pub fn check_bust(hand: &mut Hand) -> bool {\n        if hand_points(hand) as u8 > 21 {\n            hand.bust = true;\n            true\n        } else {\n            hand.bust = false;\n            false\n        }\n    }\n\n    // pub fn generate_deck() -> Deck {\n    //     let mut deck: Deck = Deck { drawn_cards_bitmap: [0.to_field(); FIELDS_FOR_DECK] };\n\n    //     let mut index = 0;\n    //     for suit in 1..=4 {\n    //         for rank in 1..=13 {\n    //             let card_index = card_id(rank as u8, suit as u8);\n    //             set_card_used(&mut deck, card_index);\n    //         }\n    //     }\n    //     deck\n    // }\n\n}\n\n","path":"/Users/niallcheetham/Dev/aztec/blackjack/blackjack/src/CardNote.nr"},"75":{"source":"//functionality that i need:\n\n//make it super simple to start similar to kits\n\n// Player hits/stands to beat dealer's hand by getting as close to 21 as possible.\n\n// Dealer must hit on and up to 16 and stand on 17.\n\n// Player can only double down on 9, 10, or 11.\n\n// Player can either double down or split, player cannot split then double down and vice versa.\n\n// Player cannot split then split again or double down more than once.\n\n// Player who splits Aces can receive only one more additional card on a hand.\n\n// Player can get insurance if dealer might have a BlackJack.\n\n// Aces are high unless card total is already greater than 11.\n\n// Blackjack payout is 3:2.\n\n// No surrender.\n\n//some finds here\n//i had to use my own serialisation and deserialisation for the deck, default ones were not working\n\nmod CardNote;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract BlackJack {\n\n    use crate::CardNote::CardNote::{\n        Card, check_bust, dealer_play, Deck, determine_winner_helper, draw_card, Hand, hand_points,\n        new_hand, player_hit_helper, start_game,\n    };\n    use dep::aztec::{\n        context::PublicContext,\n        macros::{functions::{initializer, private, public, view}, storage::storage},\n        prelude::{AztecAddress, Map, PrivateMutable, PublicImmutable, PublicMutable},\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        card_deck: PublicMutable<Deck, Context>,\n        player_hands: Map<AztecAddress, PublicMutable<Hand, Context>, Context>,\n        dealer_hand: PublicMutable<Hand, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor(player: AztecAddress) {\n        // let mut deck = Deck::new(); // Start with an empty deck\n        // storage.card_deck.write(deck);\n    }\n\n    //this is just because the constructor is private\n    #[public]\n    fn initialize_deck() {\n        let deck_seed = 30;\n        let mut deck = Deck::new(deck_seed); // Start with an empty deck\n        storage.card_deck.write(deck);\n    }\n\n    #[public]\n    #[view]\n    fn dealer_hand() -> Hand {\n        storage.dealer_hand.read()\n    }\n\n    #[public]\n    #[view]\n    fn player_hand(player: AztecAddress) -> Hand {\n        storage.player_hands.at(player).read()\n    }\n\n    #[public]\n    #[view]\n    fn view_deck() -> Deck {\n        storage.card_deck.read()\n    }\n\n    #[public]\n    #[view]\n    fn determine_winner(player: AztecAddress) -> u8 {\n        let mut player_hand = storage.player_hands.at(player).read();\n        let mut dealer_hand = storage.dealer_hand.read();\n\n        let outcome: u8 = determine_winner_helper(&mut player_hand, &mut dealer_hand);\n\n        outcome\n    }\n\n    #[public]\n    #[view]\n    fn view_player_points(player: AztecAddress) -> u8 {\n        let mut player_hand = storage.player_hands.at(player).read();\n\n        let player_points = hand_points(&mut player_hand);\n\n        player_points\n    }\n\n    #[public]\n    #[view]\n    fn view_dealer_points() -> u8 {\n        let mut dealer_hand = storage.dealer_hand.read();\n\n        let dealer_points = hand_points(&mut dealer_hand);\n\n        dealer_points\n    }\n\n    #[public]\n    fn begin_game(player: AztecAddress) {\n        //read existing\n        let mut deck = storage.card_deck.read();\n\n        let mut player_hand = new_hand();\n        let mut dealer_hand = new_hand();\n\n        // Draw cards and update deck with returned values\n        let (player_hand, dealer_hand, deck) =\n            start_game(&mut deck, &mut player_hand, &mut dealer_hand);\n\n        //store the deck\n        storage.card_deck.write(deck);\n        //store the hands\n        storage.player_hands.at(player).write(player_hand);\n        storage.dealer_hand.write(dealer_hand);\n    }\n\n    #[public]\n    fn player_hit(player: AztecAddress) {\n        let mut deck = storage.card_deck.read();\n        let mut player_hand = storage.player_hands.at(player).read();\n\n        let bust = player_hit_helper(&mut deck, &mut player_hand);\n        player_hand.bust = bust;\n\n        // Write the updated hand and deck back to storage\n        storage.player_hands.at(player).write(player_hand);\n        storage.card_deck.write(deck);\n    }\n\n    #[public]\n    fn player_stand(player: AztecAddress) {\n        // Proceed to dealer's turn\n        let mut deck = storage.card_deck.read();\n        let mut dealer_hand = storage.dealer_hand.read();\n\n        dealer_play(&mut deck, &mut dealer_hand);\n\n        storage.dealer_hand.write(dealer_hand);\n        storage.card_deck.write(deck);\n    }\n\n    #[public]\n    fn player_double_down(player: AztecAddress) {\n        let mut deck = storage.card_deck.read();\n        let mut player_hand = storage.player_hands.at(player).read();\n        let mut dealer_hand = storage.dealer_hand.read();\n\n        // Ensure player can only double down on 9, 10, or 11\n        let player_points = hand_points(&mut player_hand);\n        if player_points < 9 {\n            if player_points > 11 {\n                assert(false, \"Player can only double down on 9, 10, or 11\");\n            }\n        }\n\n        // Double the bet (implement bet logic separately)\n        // Take exactly one more card\n        player_hand.cards.push(draw_card(&mut deck));\n\n        // Update the player's hand in storage\n        storage.player_hands.at(player).write(player_hand);\n\n        // Proceed to dealer's turn\n        dealer_play(&mut deck, &mut dealer_hand);\n\n        storage.dealer_hand.write(dealer_hand);\n        storage.card_deck.write(deck);\n    }\n\n}\n","path":"/Users/niallcheetham/Dev/aztec/blackjack/blackjack/src/main.nr"},"82":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n        compute_unique_note_hash,\n    },\n    utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"97":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Deserialize, Empty, Serialize};\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\n// TODO(9396): Remove.\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// TODO(9396): Remove.\n//unconstrained fn function_selector() -> u32 {\n//    function_selector_opcode()\n//}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert<let N: u32>(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// TODO(9396): Remove.\n//#[oracle(avmOpcodeFunctionSelector)]\n//unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"98":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        header::get_header_at,\n        key_validation_request::get_key_validation_request,\n        logs::{emit_encrypted_event_log, emit_encrypted_note_log},\n        returns::pack_returns,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log_hash::{EncryptedLogHash, LogHash, NoteLogHash},\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_ENCRYPTED_LOGS_PER_CALL, MAX_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    },\n    header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"119":{"source":"use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"124":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"132":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    let (member, exists) = get_contract_instance_deployer_internal_avm(address);\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    let (member, exists) = get_contract_instance_class_id_internal_avm(address);\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    let (member, exists) = get_contract_instance_initialization_hash_internal_avm(address);\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"159":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"160":{"source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"165":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"173":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    storage::map::derive_storage_slot_in_map,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"181":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"223":{"source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"303":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"305":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"306":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"308":{"source":"use crate::meta::{derive_deserialize, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"309":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"312":{"source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    },\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"313":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n    utils,\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    ec::{pow, sqrt},\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"315":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"316":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"320":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::default::Default;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"322":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedEncryptedLogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__VK,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    proof::verification_key::VerificationKey,\n    traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"323":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Serialize}};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"340":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}