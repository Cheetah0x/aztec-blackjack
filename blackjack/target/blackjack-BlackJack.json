{"transpiled":true,"noir_version":"0.36.0+b0cbf84eaf69f77628939184c9b869cfb3e15846-aarch64","name":"BlackJack","functions":[{"name":"constructor","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"player","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"H4sIAAAAAAAA/+2dB3QUxR/HN5sECYggxUoJ0vu1JBdq6E26CiLtcneBQEiAnIAoGlBBsdCtKE2l2nvvvffee+9d8f/9hd0/k2WpmY35vue+93m3u3c39/nNzs7s3u7OJBnbp9tMwygxt88ngWTrVValO9bZr+p8qsvnqrusq+GyrqbLuoNd1h0CchzrGrp8rpHLunSXdY1d1jWz1qlTkvWaY70GfZmhUDwrEPcH/RFfIDs3nOELZeRmhv1hf0Y4IxYIB4PxcCiclZ2bneXL9oeCcX9eRnYwz7d9qm/uSMtXrikQ9dKzgTZPn89Lz4b77xlwrhC3OiBFcZXttc2ab27smG+grG9ozdvfa4TldNAYHGXuWG9PpiMPfOWb/M005mcTfdvdr+5bkm66sb2uUMvB7sqGr3xT6e9rSsuXpDjWsuabIqZmoDloAVqCVqA1aAPagnagPegAfMAPAiBoWpmRrBQILzOjtUc7tKHXM6DmRchayDCNsjW1vPG3Y518yFmqkj3MxP3d0+J526eQqW+vzfBo4+quqXTGnKmk5Q8HA4GsoHwuHMPPxKKBcCAQyw35or5INBDPDvmz80KBUDAai+YizYg/z5cXiWbnhbd7yY6YYlRMrZRp6q+VZMoyPRTOMvWnG9ZYGLyKO6xUR5rSdXXVUQGETf3pZmsurHZlLelWdAvYjrAF7GgtdHK2gB1dWsBOFdACttPYAnbUWAF0ImkBdcbcmbQF7OxRC9jF9FC4iwctYNdK3gJK3F1JWsBOlqvudLt51AJ2+xdaQB9hC5hjLXR3toA5Li1g9wpoAX0aW8AcjRVAd5IWUGfMPUhbwB4etYA9TQ+Fe3rQAvaq5C2gxN2LpAXsbrnqTre3Ry1g73+hBQwStoB9rIW+zhawj0sL2LcCWsCgxhawj8YKoC9JC6gz5n6kLWA/j1rA/qaHwv09aAEHVPIWUOIeQNIC9rVcdac70KMWcKC5c6un2/1obe7+XC89B+2/Z8i5wu1CvuSDfcG+qTLfQpkfZJa9kD8Yy0PAUDDM3PlCvu6GtZm+cuYfrLFeGa65/Du3zXBlGwxR5ocq88Mc22YElo8Bx4LjXLaN7vI5cv/zILg3eaCWz+bK/AhlfqQjD0Zh+XgwGpxQAXkwRls5CIa89By7/54x315sqzHKNmmpzLdS5sc6ttU4LI8HE0CkAuoSjbcE+MdprEtyPTpI151/bTTm33iN+Rclyb+2GvNvgsb8i3ncluUqdUBUmY8p8xFH3RDHch6YCCZVQN2g8WKpP65x2+STlO32GvMvT2P+TSbJvw4a82+ixvyb4nHdkK/UAZOV+SnK/CRH3VCA5amgEBRVQN2g8TKSv0DjtplGUrb9GvNvqsb8m06SfwGN+VeoMf9meFw3TFPqgOnK/AxlvshRNxRjOQFOBDMroG7Q+Ae7v1jjtpnl8baZpWyDhDJ/ojI/07FtZmP5JDAHnGx6f25+ir48yHPLg1OUWGcr86N28//EXCyfCk4ztz9gJutTrc9WxEWGuRrLhal4zrMW5ptG2atv8kaJY918a5066d4x52rcmebtfVrRPaTln69xA0jBMQ33y8TGPubnnrwNDwvlPM2VlT2d7iyMsmJPl4J1FpY9uPr38L7vdI2F+AxTW2Eoc8XmjL3YmcvrPl9jPujM0zP3IU/39Ftqnp6pVJppSn6qeeor3+Tftvv0AtE8fzAjnpXhy4yEMmKZwUAskOWLhTLy/BAOZIeQNXnRUDgWDgTzAlmB6Da9fqVlzK7Y7IbEblXnW/ML8LoQnGVW7D0zZ3l05qB5G5e5Z+Zsa2GRs1KUN5z3zCzai4rSV76pTCaW956ZszXu1Is82rim5vzTGfM5Juc9M+d4dORwrumh8Lmm/nTP01gYvIr7PKU60pSuJ/fMLLJcdad7vubCalfWkq6z1fPy2l9582GBxrQWaz6dqqiKa7HpTcW1xPRQeIkHFdfSSl5xSdxLPaq47MnLC83lzdOFGtNaRrqzLvNoZ11ueii83IOddUUl31kl7hVkO+sCs3JWpis1F/pq1vZeqZzHL1Tml5o7/gVvo6xvq8zbj/NfgNcLwUXWsp32gl2kvUhJe0+fuRivl4BLTW/2zaVWGdV9dLlK82mrbj+v4r5M4/5jKJOp2XORxn3zcs0x6/5rQvZPndtF9slVHpSd1aY3bYTustNJY9lZU8nLjtT9Gv+C88u+stqDsrNWc9nRnY9SZnQeW0i5WetBPiYZ3uyDuj3X6cvLmNvdBOuUYxEpC/Z8I3PXdxOsx/IV4Epwlel9t5otNNZD60lPBjU+kVTmZHCD6aHwBg9OBjdW8pNBiXujuSODNaXr6cmgmlZ587SZxu2ziXRn3eTRzrrZ9FB4swc765ZKvrNK3Fs82ll1HwlstFx1t64bzcq7ve1Jd8xNNHpu1Zh/6vU1STfdKDvpPsPTmactDG8aO90xazzy97ckidnUGHMrkpiTNcbcuoJi9pVv8rfRmH+NTG9i1t2GtzU4PNuReLYn8exA4ukj8fSTeAZIPIMkniESzwwSz0wSzywSzzCJZzaJZ0cSz04knp1JPLuQeHYl8exG4plD4tmdxLMHiWdPEs9eJJ69STz7kHj2JfHsR+LZn8RzAInnQBLPo0k8B5F4DibxHELiOZTEcxiJ53ASzxEknseQeB5L4nkciedIEs9RJJ7Hk3iOJvE8gcRzDInnWBLPcSSe40k8J5B4Rkg8c0k8oySeMRLPOIlnHonnRBLPSSSe+SSek0k8p5B4FpB4TiXxLCTxLCLxnEbiOZ3EcwaJZzGJZ4LE80QSz5kknrNIPGeTeJ5E4jmHxPNkEs9TSDznknieSuJ5GolnCYnnPBLP+SSep5N4nkHieSaJ5wISz4UknmeReJ5N4rmIxPMcEs9zSTzPI/E8n8RzMYnnEhLPpSSey0g8l5N4riDxXEnieQGJ54UknheReF5M4nkJieelJJ6rSDwvI/G8nMRzNYnnGhLPtSSe60g815N4XkHieSWJ51UknhtIPDeSeG4i8dxM4rmFxHMriefVJJ7XkHheS+J5HYnn9SSeN5B43kjieROJ580knreQeN5K4nkbieftJJ53kHjeSeJ5F4nn3SSe95B43kvieR+J5/0kng+QeD5I4vkQiefDJJ6PkHg+SuL5GInn4ySeT5B4Pkni+RSJ59Mkns+QeD5L4vkciefzJJ4vkHi+SOL5EonnyySer5B4vkri+RqJ5+sknm+QeL5J4vkWiefbJJ7vkHi+S+L5nkeepsOzMo1L/X4Fxewr3+T/QGP+qWO6+8o5GR6Wxw8NDs+PSDw/JvH8hMTzUxLPz0g8Pyfx/ILE80sSz69IPL8m8fyGxPNbEs/vSDy/J/H8gcTzRxLPn0g8fybx/IXE81cSz99IPH8n8fyDxPNPEs+/SDz/JvHcRuL5D4mnJMjgmUTiaZJ4JpN4ppB4ppJ4ViHxPIDEsyqJZxqJZzUSz+okngeSeNYg8TyIxLMmiWctEs+DSTxrk3jWIfGsS+JZj8TzEBLPQ0k8DyPxPJzE8wgSzyNJPOuTeDYg8WxI4tmIxDOdxLMxiedRJJ5NSDybkng2I/FsTuLZgsSzJYlnKxLP1iSebUg825J4tiPxbE/i2YHE00fi6SfxDJB4Bkk8QySeGSSemSSeWSSeYRLPbBLPjiSenUg8O5N4diHx7Eri2Y3EM4fEszuJZw8Sz54knr1IPHuTePYh8exL4tmPxLM/iecAEs+BJJ5Hk3gOIvEcTOI5hMRzKInnMBLP4SSeI0g8jyHxPJbE8zgSz5EknqNIPI8n8RxN4nkCiecYEs+xJJ7jSDzHk3hOIPGMkHjmknhGSTxjJJ5xEs88Es+JJJ6TSDzzSTwnk3hOIfEsIPGcSuJZSOJZROI5jcRzOonnDBLPYhLPBInniSSeM0k8Z5F4zibxPInEcw6J58kknqeQeM4l8TyVxPM0Es8SEs95JJ7zSTxPJ/E8g8TzTBLPBSSeC0k8zyLxPJvEcxGJ5zkknueSeJ5H4nk+iediEs8lJJ5LSTyXkXguJ/FcQeK5ksTzAhLPC0k8LyLxvJjE8xISz0tJPFd55Gk6PMs7bnUzjTFfVkEx+8o3+S9P0pd/W02O8riaZL9ZQ+K5lsRzHYnnehLPK0g8ryTxvIrEcwOJ50YSz00knptJPLeQeG4l8byaxPMaEs9rSTyvI/G8nsTzBhLPG0k8byLxvJnE8xYSz1tJPG8j8bydxPMOEs87STzvIvG8m8TzHhLPe0k87yPxvJ/E8wESzwdJPB8i8XyYxPMREs9HSTwfI/F8nMTzCRLPJ0k8nyLxfJrE8xkSz2dJPJ8j8XyexPMFEs8XSTxfIvF8mcTzFRLPV0k8XyPxfJ3E8w0SzzdJPN8i8XybxPMdEs93STzfI/F8n8TzAxLPD0k8PyLx/JjE8xMSz09JPD8j8fycxPMLEs8vSTy/IvH8msTzGxLPb0k8vyPx/J7E8wcSzx9JPH8i8fyZxPMXEs9fSTx/I/H8ncTzD488TYdneZ+DTtEY858kMadqjPkvkpiraIz5b5KYD9AY8zaSmKtqjPkfkpjTNMYscgwxV9MYcxJJzNU1xmySxHygxpiTSWKuoTHmFJKYD9IYcypJzDU1xlyFJOZaGmM+gCTmgzXGXJUk5toaY04jibmOxpirkcRcV2PM1Ulirqcx5gNJYj5EY8w1SGI+VGPMB5HEfJjGmGuSxHy4xphrkcR8hMaYDyaJ+UiNMdcmibm+xpjrkMTcQGPMdUlibqgx5nokMTfSGPMhJDGna4z5UJKYG2uM+TCSmI/SGPPhJDE30RjzESQxN9UY85EaY5br4nJPwM/WjQEtQEvQCrQGbUBb0A60Bx3kN4EfBCRfQAhkgEyQBcIgG3QEnUBn0AV0Bd2sfOgOeoCeoBfoDfqAvqAf6A8GgIHgaDAIDAZDwFAwDAwHI8Ax4FhwHBgJRoHjwWhwAhgDxoJxYDyYACIgF0RBDMRBHpgIJoF8MBlMAQVgKigERWAamA5mgGKQACeCmWAWmA1OAnPAyeAUMBecCk4DJWAemA9OB2eAM8ECsBCcBc4Gi8A54FxwHjgfLAZLwFKwDCwHK8BKcAG4EFwELgaXgEvBKnAZuBysBmvAWrAOrAdXgCvBVWAD2Ag2gc1gC9gKrgbXgGvBdeB6cAO4EdwEbga3gFvBbeB2cAe4E9wF7gb3gHvBfeB+8AB4EDwEHgaPgEfBY+Bx8AR4EjwFngbPgGfBc+B58AJ4EbwEXgavgFfBa+B18AZ4E7wF3gbvgHfBe+B98AH4EHwEPgafgE/BZ+Bz8AX4EnwFvgbfgG/Bd+B78AP4EfwEfga/gF/Bb+B38Af4E/wF/gbbwD9AdrgkYIJkkAJSQRVwAKgK0kA1UB0cCGqAg0BNUAscDGqDOqAuqAcOAYeCw8Dh4AhwJKgPGoCGoBFIB43BUaAJaAqageagBWgJWoHWoA1oC9qB9qAD8AE/CIAgCIEMkAmyQBhkg46gE+gMuoCuoJtcawfdQQ/QE/QCvUEf0Bf0A/3BADAQHA0GgcFgCBgKhoHhYAQ4BhwLjgMjwShwPBgNTgBjwFgwDowHE0AE5IIoiIE4yAMTwSSQDyaDKaAATAWFoAhMA9OBjGkv48XLWOwyzrmMIS7jc8vY1zKutIzZLOMhy1jDMo6vjJEr48+WABk3VcYklfE+ZSxNGadSxoCU8RVl7EIZF1DG3JPx7GSsOBmHTcY4k/HDZGwuGfdKxpSS8ZpkLCQZZ0jG8JHxcWTsGRnXRcZMkfFIZKwPGftCxpWQcRbWABkfQPrel37tpc946Y9d+jqXfsSlj27p/1r6lpZ+m6VPZOlvWPrylX5ypQ9a6d9V+k6Vfkmlz0/pT1P6qpR+IKWPRem/UPoGlH73pE876S9O+mKTfs7uA9I/l/R9Jf1KSZ9N0h+S9DUk/fhIHznS/4z07SL9pkifJNLfh/SlIf1USB8Q0r+C9F0g/QLIM/fyPLs8Ky7PYcszzvL8sDybK8+9yjOl8rymPAspzxnKM3zyfJw8eybPdckzU/I8kjzrI8/RyDMq8vyHPFshzy3IMwFyv73cyy73ics92HJ/s9w7LPflyj2v0n7KvZpyH6TcYyj378m9cXKvmNw7JfcSyb01cq+JHFzIvQhybV6uVcu1W7mWKdf25FqXXPuRayFybUD+K5f/juW/VPlvUf5rk/+e5L8Y+W9CztXl3FXO5eTcRo715dhXjgXl2EiOFcztVY4hbb1MLYwdk6VjJFvvyz1jcg+V3FMk99jIPSdyD4bckyDX6OWatVzDlWuaco1PrnnJNSC5JiLXCOQ/c/kPWf5Tlf8Y5T83+Q9K/pOR/yjknF3OYeWcLh00BnIMLMeEcowk4700N3aeqivztZX5+tZrJJGIT52WSE8UpUdisfRZ+YlJ6UUz4zPyCoqkSS49LrCnI63XaKSgoPQLxcXxGYnxUyOzx+fmJ8YX58+Ro4HSw4h9/MrYff/K+H3/ymnKV46yXvsX5ifyIwX5cyKJ/KLC9EmR4knpsaJ4cXphUSJ9aiQRlYOa0qMLe/I5vxmfIVk3I15cnJ6//XuJSfH0aFFhYkYkmkiPxacVFJ0Ul4Oe0qOTfdkCUsrqWJ9rqXz3IOt1RCISnYJvFuFX4lK9lh7LydRgrz492pGBu/50aQGXqbX1mma92gf8kpzsDDl2NpXzYD1NSVd3+mFfRijNKDtp9g+mGTsqCa/yx07Tg/RLb46UqWfJjvSdschUw1pOUvLS/o5UhLWU76hpGFYazu/a73sZX9gXCtnpp3iQPjZP6U1KpTGW7Jx/9nspJWV/W30vVXnPdpT8PNyal2qhl/WZWsr7TZV0nPmdVAF5i9j9SY7fMxy/ZTh+v5rh7b6S5Pg928eZP/b8gcaOandiPNHTqsr7FxYnIoXRuBqCmmwtlxDVLHD7jPNzzs/XcHnf1qyurD+gxCgTWumrss4uTnbxqqp+3vFemvJeSklZr2rWcoryO2patkeq4/NNrOWa1msV5Tv292u5/H4Vx++X8XZZpxYhZ1rJLuvsz8uxm90iS77azUNKyY70dBXJrLDPZ/vZeZ9qlC2ehuP3Ux2fb2XH4qGnTLV34yT51MjhwXk4EMr873Bg95Ouw4Hqyudk6qWkl+R4r7fLb6nNnr1ObRaTXfJBLTMpxs5Vv7NpMHaRhlsdnGbsHG+O9erbt8nvXKE67yk2+71UR6xucavfTzV2jjvVkb7zEMlw+Y3kXXzXLV1zN3Hs6bvOwyjndrR9GOrwhtbyv12HN3B4/FeHu05Bj+vYgLenJO51uBqL/bu7q8PdTit6We+51e9qHW6nV8ex3v7uoUqaqk+qsev6N9XxWbusy/FczV2kV2U36dnxJe/ie/Ws+TTD/bg9x3r1lW/yu3kkuXi4nR/Y32GoA+sr+emVp0x7qgOrOjyqGZ54BOz0q3uT/v/3cXWqpsxXd7xnl/sUl+8l7WLZdLzu7rPO9eq6Gi7vqcd5znVpjte6SnpetFP1vEnfdRvVVebrOeJU8zlHk4Odnr2vpro4mY73/n++7fDTcOzrnPxOl2SX37IntazY7/8Psp73D/3WAQA=","debug_symbols":"7V3Rbts6DP2XPPdBpCiJ6q9cXAxp1w0BgnRouwtcFP33KV4lK7UTNYiTqLT2MNQto/CcY8uHtGW/Lr4/3P3++W21+fH4vLj953WxfrxfvqweN2HrdQG6+93zr+Vmu/n8snx6WdyC9epm8bD5Hn50Sr3dLH6s1g+LW2febgbByJreg5GNTcFg1Ui0NmDeo7VhLkRD+BcHDz9iH68Rx+KZbQz3yvTRNDo4+jS24zz435sFUGNmDzOmMbOHGduY2cOMO5kZUhixkrKQgj13X8Dn/gJ/urZoIp+InGlr/Ei0oxjsuOceNG6zQXXpbKDPxu5kMzKyQowjE/VpaBiLJnCJdvA22ydVhxRmgxRng1TPBinNBqmZDVI7G6RuNkh5Nkj9XJBqQR6JVEyaCGGAVJBHKiAV5JEKSAV5pAJSmg1SQR6pgFSQRyogFeSRCkgFeaQCUkEe6TBSEuSRbN++szRwgyTIIxWQCvJIBaSCPFIBKc0GqSCPVEAqyCMVkArySAWkgjxSAakgj3QYqRHkkZjiRVpiN3CDRpBHKiAV5JEKSAV5pAJSmg1SQR6pgFSQRyogFeSRCkgFeaQCUkEe6TBSe2mP5NnFkZUqQnWK49CcDT0OFRDTXXLoKYu2I9HWxEQ4v0UOxiCCsjrdUacs+YzG0UwoSQREGenH34BnoQlUt0DYBKpbIN0E+pRATvcCsSsJNN09xpaaQHULZAQJBL1Aeof0MYHA9NOQ9VCKvqJEtklUu0Suaoks6SSRdwWJ0KeZC73TWbQeidYAUX4dSpadGqQuq8BNotol8k2iyiVydfcUmkRBorq7Ck2iIFHdfYUmUZCo7s5CkyhIRE2i2iWqu7vQJAoS1d1daBIFiVp3oXqJWneheolad6F2ibh1F6qXqHUXqpeodRc+K9G1rhdx6y5ULxHJkUgrFa+6hkunpiDRNUkX1C/4OqQL6gBoTE9T1Gi4QHqYgCIvSBnlSEXG+3kOTUeioBr9nCR6YxKJ2Z6Iow9/tBEi+Yxv2/EtqOA+I9+oFMRghXQC34Kq53PyDZASAe0/TBJeUH17ThJDdI9RH95pQfcYKTsRvjMuqFz9IowLqj6rYdzo5A1N9gDqo2dxL6julCcONXGmFyc9jjJwcILf9JIqU3HiSKpgwdteHF8QJ7SKY9uYKGunjYqjXeJQM+g8eEuipAr2jCSyjxWV9kMSJZWlVyNRUq15LRIDksbiBCxKKiCvx6KkovB6LEqq3q7HIjUWJ2BRUj10PRZb4TIFi1IrF1u6myJMZgmjyp4ANMqiAR9rcxM6AAMWpZYul2VRau1yURZBau1yWRal1i4Ts4jprY4GrR2wKLV2uSyLUmuXy7JIjcUJWJRau0zMonXRdRsHBYvu+tvdneWBRQephU7FlLeq6FOUMyTK2eBplLcS6gyU+4jROYAB5a3eujTldb/nHPrVKCGPHca75Kt+nUIp+XYZ5XPtwpSIZuMG+2+7jDIFi3RFFsHtsNjlM4Gp14keDOgL+WB/N00QSheir7i+B6Z4ObpUaiYwyTqdLZEId8B2XzGBKTRpKRka9AU+jfMmnetB7cwJXUK+soSmeCn4tAlNYBJMqhTQOFc6BEBneykNE8LaEtK1JUS1JWSm2Kl1nxAPZpYJXujMEEFw9tCBPUdNP++afAHk9s7dkXO7wv7krozJw7vk3VdNPmzcPa3W69XPb+vH++XL6nHzvP2w2v433nUx6anXxsLAuvDxH/FHf2S8ajv8ETj+I3jkR8IWdLyNz3Aqla2g9M5So5FKK50CHGAe2u1u5x2eTh8+rSJx9HHd4J6G9XHDY2pcfVy7vKc5O9nw7vThOR7pLiuJ3ofn8w7vTx6e02TC9HHP2dNMOW74aGZ4d/nR3kP4uOFdlJYH5CBOOLz/cFiFDTwwNYBKD8wBxZ87YoDSghOwhaVarEw8FbFyu0tO3sLWf8un1fJu/bCd+7d//L25j6eCsPny/6+/fwnBfwA=","brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"begin_game","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"player","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["begin_game"],"assert_messages":{"1926":"Array index out of bounds","1859":"attempt to add with overflow","1146":"attempt to add with overflow","3962":"Array index out of bounds","4084":"attempt to add with overflow","433":"attempt to multiply with overflow","1134":"Array index out of bounds","2091":"Array index out of bounds","744":"Array index out of bounds","488":"Array index out of bounds","1512":"Array index out of bounds","2914":"Array index out of bounds","3548":"attempt to add with overflow","2457":"attempt to add with overflow","4127":"Array index out of bounds","787":"Array index out of bounds","464":"attempt to add with overflow","1677":"Array index out of bounds","2378":"Array index out of bounds","3079":"Array index out of bounds","4103":"Array index out of bounds","2689":"Array index out of bounds","2622":"attempt to add with overflow","3902":"Array index out of bounds","4115":"attempt to add with overflow","2421":"Array index out of bounds","2854":"Array index out of bounds","483":"attempt to multiply with overflow","995":"attempt to add with overflow","1117":"attempt to add with overflow","3677":"Array index out of bounds","471":"push out of bounds","4067":"Array index out of bounds","849":"Array index out of bounds","782":"attempt to add with overflow","1550":"Array index out of bounds","1806":"attempt to add with overflow","3842":"Array index out of bounds","2940":"attempt to add with overflow","3452":"Array index out of bounds","502":"Array index out of bounds","1459":"Array index out of bounds","3117":"attempt to add with overflow","234":"attempt to add with overflow","679":"Storage slot 0 not allowed. Storage slots must start from 1.","2983":"Array index out of bounds","3105":"attempt to add with overflow","3617":"Array index out of bounds","3940":"Array index out of bounds","4139":"attempt to add with overflow","1935":"Array index out of bounds","844":"attempt to multiply with overflow","2569":"attempt to add with overflow","1478":"attempt to add with overflow","1399":"Array index out of bounds","2100":"Array index out of bounds","497":"attempt to add with overflow","753":"attempt to add with overflow","1643":"attempt to add with overflow","552":"Array index out of bounds","1064":"Array index out of bounds","1442":"Array index out of bounds","1710":"Array index out of bounds","28":"Not initialized","2923":"Array index out of bounds","3703":"attempt to add with overflow","1875":"Array index out of bounds","3088":"Array index out of bounds","3746":"Array index out of bounds","2698":"Array index out of bounds","3868":"attempt to add with overflow","4033":"attempt to add with overflow","760":"Attempted to read past end of BoundedVec","2863":"Array index out of bounds","3375":"attempt to add with overflow","1961":"attempt to add with overflow","2473":"Array index out of bounds","547":"attempt to add with overflow","3686":"Array index out of bounds","2138":"attempt to add with overflow","535":"Array index out of bounds","2004":"Array index out of bounds","2961":"Array index out of bounds","2126":"attempt to add with overflow","2638":"Array index out of bounds","3851":"Array index out of bounds","901":"Array index out of bounds","3461":"Array index out of bounds","511":"attempt to add with overflow","1590":"attempt to add with overflow","3626":"Array index out of bounds","420":"push out of bounds","2724":"attempt to add with overflow","1944":"Array index out of bounds","530":"attempt to multiply with overflow","2767":"Array index out of bounds","3724":"Array index out of bounds","2889":"attempt to add with overflow","774":"Array index out of bounds","518":"push out of bounds","3980":"attempt to add with overflow","2109":"Array index out of bounds","1719":"Array index out of bounds","884":"attempt to add with overflow","561":"attempt to add with overflow","1073":"Array index out of bounds","3054":"attempt to add with overflow","872":"Array index out of bounds","3365":"attempt to bit-shift with overflow","3487":"attempt to add with overflow","1884":"Array index out of bounds","2396":"attempt to add with overflow","1494":"Array index out of bounds","2707":"Array index out of bounds","3408":"attempt to bit-shift with overflow","3530":"Array index out of bounds","1159":"attempt to add with overflow","3652":"attempt to add with overflow","769":"attempt to multiply with overflow","1982":"Array index out of bounds","379":"attempt to add with overflow","1659":"Array index out of bounds","2872":"Array index out of bounds","2482":"Array index out of bounds","3884":"Array index out of bounds","3817":"attempt to add with overflow","2647":"Array index out of bounds","977":"Array index out of bounds","910":"Array index out of bounds","1099":"attempt to add with overflow","1745":"attempt to add with overflow","3470":"Array index out of bounds","4049":"Array index out of bounds","1788":"Array index out of bounds","2745":"Array index out of bounds","1910":"attempt to add with overflow","307":"attempt to add with overflow","819":"Array index out of bounds","3001":"attempt to add with overflow","3635":"Array index out of bounds","4092":"Array index out of bounds","4147":"Stack too deep","862":"Array index out of bounds","2075":"attempt to add with overflow","405":"attempt to add with overflow","2386":"attempt to bit-shift with overflow","2508":"attempt to add with overflow","1417":"attempt to add with overflow","1728":"Array index out of bounds","2429":"attempt to bit-shift with overflow","1082":"Array index out of bounds","2551":"Array index out of bounds","3508":"Array index out of bounds","2673":"attempt to add with overflow","3764":"attempt to add with overflow","936":"attempt to add with overflow","1125":"Array index out of bounds","1893":"Array index out of bounds","1503":"Array index out of bounds","857":"attempt to add with overflow","2838":"attempt to add with overflow","2905":"Array index out of bounds","3417":"Array index out of bounds","333":"attempt to add with overflow","455":"Array index out of bounds","1668":"Array index out of bounds","3070":"Array index out of bounds","955":"Array index out of bounds","2491":"Array index out of bounds","3893":"Array index out of bounds","3436":"attempt to add with overflow","809":"attempt to add with overflow","1766":"Array index out of bounds","2022":"attempt to add with overflow","2656":"Array index out of bounds","797":"Array index out of bounds","3357":"Array index out of bounds","919":"Array index out of bounds","1108":"Array index out of bounds","3601":"attempt to add with overflow","3668":"Array index out of bounds","4058":"Array index out of bounds","3400":"Array index out of bounds","261":"attempt to add with overflow","450":"attempt to add with overflow","1407":"attempt to bit-shift with overflow","828":"attempt to add with overflow","1529":"attempt to add with overflow","438":"Array index out of bounds","3833":"Array index out of bounds","1450":"attempt to bit-shift with overflow","1572":"Array index out of bounds","2529":"Array index out of bounds","1694":"attempt to add with overflow","2785":"attempt to add with overflow","1048":"attempt to add with overflow","3919":"attempt to add with overflow","2438":"Array index out of bounds","835":"Attempted to read past end of BoundedVec"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"5443":"attempt to add with overflow","4742":"Array index out of bounds","2938":"Array index out of bounds","4419":"Array index out of bounds","299":"attempt to add with overflow","1512":"attempt to add with overflow","3371":"Array index out of bounds","4584":"Array index out of bounds","5206":"Array index out of bounds","1299":"attempt to add with overflow","2323":"attempt to add with overflow","5261":"Array index out of bounds","330":"Not initialized","3457":"attempt to add with overflow","3969":"Array index out of bounds","4993":"Array index out of bounds","1976":"Array index out of bounds","4914":"attempt to multiply with overflow","4457":"Array index out of bounds","3622":"attempt to add with overflow","4134":"Array index out of bounds","4835":"attempt to add with overflow","4701":"Array index out of bounds","1361":"attempt to multiply with overflow","3086":"attempt to add with overflow","4945":"attempt to add with overflow","4220":"attempt to add with overflow","2227":"Array index out of bounds","3440":"Array index out of bounds","1581":"Array index out of bounds","4976":"attempt to add with overflow","935":"Array index out of bounds","1959":"Array index out of bounds","4385":"attempt to add with overflow","5165":"Array index out of bounds","2392":"Array index out of bounds","3605":"Array index out of bounds","4550":"attempt to add with overflow","887":"attempt to add with overflow","2478":"attempt to add with overflow","2990":"Array index out of bounds","4203":"Array index out of bounds","918":"Array index out of bounds","2643":"attempt to add with overflow","3155":"Array index out of bounds","461":"Function view_deck can only be called statically","3478":"Array index out of bounds","4368":"Array index out of bounds","5069":"Array index out of bounds","2107":"attempt to add with overflow","4667":"attempt to add with overflow","4722":"attempt to add with overflow","815":"attempt to add with overflow","5234":"Attempted to read past end of BoundedVec","3241":"attempt to add with overflow","2461":"Array index out of bounds","4241":"Array index out of bounds","3406":"attempt to add with overflow","4808":"attempt to add with overflow","901":"push out of bounds","2626":"Array index out of bounds","3571":"attempt to add with overflow","1389":"Array index out of bounds","743":"attempt to add with overflow","4004":"attempt to add with overflow","5028":"attempt to add with overflow","2011":"Array index out of bounds","3224":"Array index out of bounds","3925":"attempt to bit-shift with overflow","4169":"attempt to add with overflow","1286":"attempt to multiply with overflow","2499":"Array index out of bounds","2176":"Array index out of bounds","963":"attempt to multiply with overflow","3389":"Array index out of bounds","5248":"Array index out of bounds","4334":"attempt to add with overflow","2262":"attempt to add with overflow","403":"Storage slot 0 not allowed. Storage slots must start from 1.","1427":"Array index out of bounds","1616":"attempt to add with overflow","3987":"Array index out of bounds","5011":"Array index out of bounds","4609":"Array index out of bounds","3262":"Array index out of bounds","2427":"attempt to add with overflow","4152":"Array index out of bounds","1379":"Array index out of bounds","2592":"attempt to add with overflow","977":"attempt to add with overflow","3025":"attempt to add with overflow","5451":"Array index out of bounds","1032":"Array index out of bounds","2245":"Array index out of bounds","2946":"attempt to bit-shift with overflow","1599":"Array index out of bounds","4025":"Array index out of bounds","3190":"attempt to add with overflow","173":"Not initialized","2410":"Array index out of bounds","5214":"Array index out of bounds","3355":"attempt to add with overflow","4891":"attempt to add with overflow","716":"attempt to add with overflow","5379":"attempt to add with overflow","1472":"Array index out of bounds","3008":"Array index out of bounds","4410":"Array index out of bounds","1015":"Array index out of bounds","5434":"Array index out of bounds","3953":"attempt to add with overflow","2283":"Array index out of bounds","4843":"Array index out of bounds","3173":"Array index out of bounds","1314":"Array index out of bounds","991":"attempt to add with overflow","3874":"Array index out of bounds","4575":"Array index out of bounds","4118":"attempt to add with overflow","4953":"attempt to add with overflow","5087":"attempt to add with overflow","4874":"attempt to add with overflow","1345":"attempt to add with overflow","2046":"attempt to add with overflow","4795":"attempt to multiply with overflow","5362":"attempt to multiply with overflow","1967":"attempt to bit-shift with overflow","998":"push out of bounds","2211":"attempt to add with overflow","3046":"Array index out of bounds","1565":"attempt to add with overflow","5283":"attempt to add with overflow","5472":"attempt to add with overflow","4692":"attempt to add with overflow","5393":"attempt to add with overflow","1352":"Attempted to read past end of BoundedVec","2376":"attempt to add with overflow","4936":"Array index out of bounds","4479":"Array index out of bounds","1651":"Array index out of bounds","5424":"attempt to add with overflow","2029":"Array index out of bounds","4778":"attempt to add with overflow","3431":"Array index out of bounds","4644":"Array index out of bounds","5156":"Array index out of bounds","2974":"attempt to add with overflow","1304":"Array index out of bounds","4754":"attempt to add with overflow","2194":"Array index out of bounds","4620":"Array index out of bounds","335":"Function player_hand can only be called statically","2895":"Array index out of bounds","3596":"Array index out of bounds","3139":"attempt to add with overflow","4919":"Array index out of bounds","1634":"attempt to add with overflow","4194":"Array index out of bounds","1366":"Array index out of bounds","2067":"Array index out of bounds","74":"Not initialized","4359":"Array index out of bounds","3634":"attempt to add with overflow","3500":"Array index out of bounds","4902":"push out of bounds","861":"attempt to add with overflow","4823":"Array index out of bounds","2452":"Array index out of bounds","5201":"attempt to add with overflow","1995":"attempt to add with overflow","5256":"attempt to add with overflow","1916":"Array index out of bounds","2617":"Array index out of bounds","1270":"attempt to add with overflow","2160":"attempt to add with overflow","4263":"Array index out of bounds","4964":"Array index out of bounds","789":"attempt to add with overflow","3215":"Array index out of bounds","4672":"Array index out of bounds","1277":"Attempted to read past end of BoundedVec","3380":"Array index out of bounds","3892":"attempt to add with overflow","930":"attempt to add with overflow","2655":"attempt to add with overflow","2521":"Array index out of bounds","4813":"Array index out of bounds","1418":"Array index out of bounds","3978":"Array index out of bounds","5002":"Array index out of bounds","5191":"attempt to add with overflow","4143":"Array index out of bounds","4710":"Array index out of bounds","3284":"Array index out of bounds","913":"attempt to multiply with overflow","4497":"attempt to add with overflow","1291":"Array index out of bounds","456":"Not initialized","968":"Array index out of bounds","2236":"Array index out of bounds","1401":"attempt to add with overflow","1590":"Array index out of bounds","5174":"Array index out of bounds","944":"attempt to add with overflow","3882":"attempt to bit-shift with overflow","2401":"Array index out of bounds","2913":"attempt to add with overflow","5339":"attempt to add with overflow","4047":"Array index out of bounds","1676":"attempt to add with overflow","951":"push out of bounds","2999":"Array index out of bounds","4401":"Array index out of bounds","5047":"Array index out of bounds","5291":"Array index out of bounds","5480":"Stack too deep","3164":"Array index out of bounds","5401":"attempt to add with overflow","982":"Array index out of bounds","1494":"Array index out of bounds","4566":"Array index out of bounds","5322":"attempt to add with overflow","2305":"Array index out of bounds","3518":"attempt to add with overflow","4731":"Array index out of bounds","1336":"Array index out of bounds","5243":"attempt to multiply with overflow","178":"Function dealer_hand can only be called statically","4786":"Attempted to read past end of BoundedVec","2903":"attempt to bit-shift with overflow","5140":"attempt to add with overflow","1934":"attempt to add with overflow","5384":"Array index out of bounds","3068":"Array index out of bounds","4281":"attempt to add with overflow","1453":"attempt to add with overflow","1642":"Array index out of bounds","5226":"attempt to add with overflow","2020":"Array index out of bounds","1374":"attempt to add with overflow","3422":"Array index out of bounds","3934":"Array index out of bounds","2185":"Array index out of bounds","1027":"attempt to add with overflow","4800":"Array index out of bounds","3587":"Array index out of bounds","570":"attempt to add with overflow","5367":"Array index out of bounds","1326":"attempt to add with overflow","2539":"attempt to add with overflow","1436":"Array index out of bounds","601":"Not initialized","1625":"Array index out of bounds","4185":"Array index out of bounds","3917":"Array index out of bounds","1924":"attempt to bit-shift with overflow","4350":"Array index out of bounds","1144":"Storage slot 0 not allowed. Storage slots must start from 1.","1010":"attempt to multiply with overflow","2089":"Array index out of bounds","3302":"attempt to add with overflow","5350":"push out of bounds","5271":"Array index out of bounds","4436":"attempt to add with overflow","1041":"attempt to add with overflow","5460":"Array index out of bounds","2443":"Array index out of bounds","2955":"Array index out of bounds","4680":"Array index out of bounds","1663":"attempt to add with overflow","4601":"attempt to add with overflow","2608":"Array index out of bounds","1261":"Array index out of bounds","4656":"attempt to add with overflow","5412":"Array index out of bounds","4065":"attempt to add with overflow","4766":"Array index out of bounds","4632":"attempt to add with overflow","3206":"Array index out of bounds","4931":"attempt to add with overflow"}},{"name":"player_hand","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"player","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"cards","type":{"fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}],"kind":"struct","path":"CardNote::CardNote::Card"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"}},{"name":"bust","type":{"kind":"boolean"}}],"kind":"struct","path":"CardNote::CardNote::Hand"},"visibility":"public"}},"bytecode":"JgAEAQInAASAUgABJgAEAwAmAgQBAiYCBAADHxgAAwACgEMtCIBDAAEkAAAAEgAoAQIEJwIEgEQABSYCBAwGLQQABIADLQQABYAELQQABoAFJAAAAkEtBAACgFAtBAADgFE6AIBEAA4kAAACTCwIAQMAAAECASYCAQAELA4EAywIAQMAAAECASYCAAAFLA4FAywIAQMAAAECASYCAAIGLA4GAx4CAAADHgIAAAYyOAADAAYAByYCAQEDIwIAAAAmAAcmAgQABjsJAAYeAgoABiYCAAEHCjgGBwgjAgAAACwACCYCBAAJOwkACSwIAQYmAgQEBwAQAQcBJgMEAQYAKAYCBywMBwgsDgUIACgIAggsDgUIACgIAggsDgUILA0GBwAoBwIHLA4HBiwNBgcAKAcCBywOBwYsDQYHACgHAgcsDgcGLA0GBwAoBwIHLA4HBiwIAQcAAAECASwOBgcsCAEGJgIEBQgAEAEIASYDBAEGACgGAggsDAgJLA4FCQAoCQIJLA4FCQAoCQIJLA4FCQAoCQIJKgIAAAAAAAAAAAIAAAAAAAAAAAAKLA4KCSwNBggAKAgCCCwOCAYsCAEIAAABAgEsDgYILAgBBgAAAQIBJgIEAAksDgkGLAgBCgAAAQIBLA4ECiYCBAILJgIEAQwmAgQEDSYCAAoOJgIEAw8sDAkCIgAAAGgMOAILECMCAAABngAQIgAAAGssDQoCCjgCBA4jAgAAAHAADiYCBAAQOwkAECwMCQEiAAAAcgw4AQ8CIwIAAAFrAAIiAAAAdSwNBwIsDQYOLA0IECwIAREmAgQFEgAQARIBJgMEAREAKBACEiYCBAQTACgRAhQ+DwASABQsDQINAigNAg0sDg0CLA4CBywOEQgsDg4GLA4DCgAoEQIGADgGCQcsDQcCCjgCBQYKOAYEByMCAAAAjwAHJgIEAAg7CQAILAgBBiYCBAcHABABBwEmAwQBBgAoBgIHLAwHCCwOBQgAKAgCCCwOBQgAKAgCCCwOBQgAKAgCCCwOBQgAKAgCCCwOBQgAKAgCCCwOBQgsDQYHACgHAgcsDgcGLAgBBwAAAQIBLA4GByYCBAYGLAwJASIAAACpDDgBBggjAgAAAVMACCIAAACsLA0HAiwIAQcmAgQNCAAQAQgBJgMEAQcAKAcCCCwMCAosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKACgKAgosDgUKLA0HCAAoCAIILA4IBywIAQgAAAECASwOBwgsCAEHAAABAgEsDgkHJwIEAQAACiYCBA4NLAwJASIAAADXDDgBBg4jAgAAAN4ADiIAAADaLA0IASwNBwIsDAQDJSYCBAYQDDgBEBEjAgAAAOMAESYCBAASOwkAEgAoAgIQADgQAREsDREOCjgOBRAWDBARIwIAAADqABEiAAABTCwIARAmAgQhEQAQAREBJgMEARAAKBACEUM6AA4AEQAKACAAJgIEIBItBAARgAMtBAASgAQkAAACUgAoEAIRADgRCRIsDRIOHAwEDhEAKBACEgA4EgwTLA0TDhwMBA4SBDgSCg4AOBEOEg44ERITIwIAAAECABMmAgQAFDsJABQGOBINEQQ4EQ0TAjgSEw4AKBACEgA4EgsTLA0TERwMBBESACgQAhMAOBMPFCwNFBEcDAQREAQ4EAoRADgSERAOOBIQEyMCAAABEwATJgIEABQ7CQAUJgIEBBIGOBASEwQ4ExIUAjgQFBEcDAAOEBwMABEOLA0HEQw4EQYSIwIAAAEeABImAgQAETsJABEsDQgRLA0HEiwNBxMEOBMLFCYCBAAWCjgWCxUjAgAAASoAFQY4FAsYCjgYExcjAgAAASoAFyYCBAAZOwkAGSYCBAwVDDgUFRYjAgAAAS8AFiYCBAAXOwkAFy0EABGAAycABAANgAQkAAACZS0IgAUAEwAoEwIVADgVFBYsDhAWADgUDBAOOBQQESMCAAABOwARJgIEABU7CQAVJgIEDBQMOBAUFSMCAAABQAAVJgIEABY7CQAWACgTAhQAOBQQFSwODhUsDBMRADgSDA4OOBIOECMCAAABSQAQJgIEABM7CQATLA4RCCwODgciAAABTAA4AQwODjgBDhAjAgAAAVEAECYCBAAROwkAESwMDgEiAAAA1ywNBwgcDAABCgA4AgoNLgwADQAKJgIEBg4MOAEOECMCAAABXAAQJgIEABE7CQARLQQACIADJwAEAAeABCQAAAJlLQiABQANACgNAg4AOA4BECwOChAAOAEMCA44AQgKIwIAAAFoAAomAgQADjsJAA4sDg0HLAwIASIAAACpLA0GAgw4AQIOIwIAAAFvAA4iAAABlywNBwIsDQgOLA0GECwNChEsDQgSJgIEBBQMOAEUFSMCAAABeQAVJgIEABY7CQAWACgSAhQAOBQBFSwNFRMsDQcSJgIEAxUMOAEVFiMCAAABggAWJgIEABc7CQAXACgSAhUAOBUBFiwNFhQAOBMUEiYCBAQUDDgBFBUjAgAAAYsAFSYCBAAWOwkAFi0EAA6AAycABAAFgAQkAAACZS0IgAUAEwAoEwIUADgUARUsDhIVLA4CBywOEwgsDhAGLA4RCiIAAAGXADgBDAIOOAECDiMCAAABnAAOJgIEABA7CQAQLAwCASIAAAByDDgCCxAjAgAAAaEAECIAAAIHLAgBECYCBAMRABABEQEmAwQBEAAoEAIRLAwREiwODhIAKBICEiwOARImAgQCEgw4AhITIwIAAAGvABMmAgQAFDsJABQAKBACEgA4EgITLA0TESwNChAKOBAEEiMCAAABtwASJgIEABM7CQATLA0GEAo4EA8SIwIAAAHcABIiAAABuywNBxAsDQgSLA0GEywNChQsDQYVJgIEAxcMOBUXGCMCAAABxQAYJgIEABk7CQAZLQQAEIADJwAEAASABCQAAAJlLQiABQAWACgWAhcAOBcVGCwOERgsDRYQACgQAhAsDhAWLA0SEAAoEAIQLA4QEgA4EwwQDjgTEBEjAgAAAdcAESYCBAAVOwkAFSwOFgcsDhIILA4QBiwOFAoiAAACBywMCRAiAAAB3gw4EA8SIwIAAAIOABIiAAAB4SwNBxAsDQoSLA0IEywIARQmAgQFFQAQARUBJgMEARQAKBMCFSYCBAQWACgUAhc+DwAVABcsDRATAigTAhMsDhMQLA0QEwAoEwITLA4TECwNFBMAKBMCEywOExQtBAAQgAMnAAQABIAEJAAAAmUtCIAFABMAKBMCFQA4FQkWLA4RFiwNExAAKBACECwOEBMsDRQQACgQAhAsDhAULA4TBywOFAgsDgwGLA4SCiIAAAIHADgCDBAOOAIQESMCAAACDAARJgIEABI7CQASLAwQAiIAAABoLA0GEgw4EBITIwIAAAISABMiAAACOiwNBxIsDQgTLA0GFCwNChUsDQgWJgIEBBgMOBAYGSMCAAACHAAZJgIEABo7CQAaACgWAhgAOBgQGSwNGRcsDQcWJgIEAxkMOBAZGiMCAAACJQAaJgIEABs7CQAbACgWAhkAOBkQGiwNGhgAOBcYFiYCBAQYDDgQGBkjAgAAAi4AGSYCBAAaOwkAGi0EABOAAycABAAFgAQkAAACZS0IgAUAFwAoFwIYADgYEBksDhYZLA4SBywOFwgsDhQGLA4VCiIAAAI6ADgQDBIOOBASEyMCAAACPwATJgIEABQ7CQAULAwSECIAAAHeAQCAA4AFgActAIADgAgtAIAEgAkLAIAIgAeACiMAAAACS4AKLQGACIAGLQKABoAJAQCACAACgAgBAIAJAAKACSIAAAJEJScABHgAgAQNAAAAgASAAyMAAAACUYADJwAEAACABDwBAACABCUnAAQAAoAGBwCABIAGgAUtAIAEgAgnAAQAAIAJDQCACYAFgAoXAIAKgAojAAAAAmSACgMAgAgAAoAIAQCAA4AJgAstAYALgAYBAIADgAiACy0BgAuABwEAgAOACYALLQKAB4ALAQCAA4AIgAstAoAGgAsBAIAJAAKACSIAAAJWJS0BgAOABgsAgAYAAoAHIwAAAAJpgAciAAACay0AgAOABSIAAAJ5LQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwAAAAJ3gAwtAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAAAnAnAQQAAYAFIgAAAnklLQAYyhjK","debug_symbols":"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","brillig_names":["player_hand"],"assert_messages":{"285":"push out of bounds","314":"attempt to add with overflow","142":"Storage slot 0 not allowed. Storage slots must start from 1.","43":"Function player_hand can only be called statically","302":"Array index out of bounds","37":"Not initialized","226":"Array index out of bounds","319":"Array index out of bounds","328":"attempt to add with overflow","430":"Array index out of bounds","470":"attempt to add with overflow","523":"attempt to add with overflow","336":"attempt to add with overflow","557":"Array index out of bounds","394":"Array index out of bounds","359":"attempt to add with overflow","452":"Array index out of bounds","257":"attempt to add with overflow","385":"Array index out of bounds","347":"Array index out of bounds","376":"Array index out of bounds","411":"attempt to add with overflow","274":"attempt to add with overflow","539":"Array index out of bounds","548":"Array index out of bounds","297":"attempt to multiply with overflow","574":"attempt to add with overflow","592":"Stack too deep"}},{"name":"initialize_deck","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JgAEAQInAASAQwABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAACDoAgEMAACQAAACUHgIAAAIeAgAAAzI4AAIAAwAEJgIBAQIjAgAAABAABCYCBAADOwkAAywIAQImAgQKAwAQAQMBJgMEAQIAKAICAywMAwQmAgAABSwOBQQAKAQCBCwOBQQAKAQCBCwOBQQAKAQCBCwOBQQAKAQCBCwOBQQAKAQCBCwOBQQAKAQCBCwOBQQAKAQCBCwOBQQAKAQCBCwOBQQsDQIDACgDAgMsDgMCLAgBAwAAAQIBLA4CAyYCAgACJgIEBwQsCAEGJgIECAcAEAEHASYDBAEGACgGAgcsDAcILA4CCAAoCAIILA4CCAAoCAIILA4CCAAoCAIILA4CCAAoCAIILA4CCAAoCAIILA4CCAAoCAIILA4CCCYCBAEHJgIEAAgsDAgBIgAAAEcMOAEECSMCAAAAdgAJIgAAAEosDQMCJgIAKgYtBAACgAMnAAQACoAEJAAAAJotCIAFAAkAKAkCCgA4CgQLLA4GCywNCQIAKAICAiwOAgkmAgQIAgAoCQIGADgGAgosDgUKLAwJBCwOBAMmAgQJAiYCAAEDLAwIASIAAABgDDgBAgUjAgAAAGQABSIAAABjJRwMAAEFADgDBQYmAgQJCAw4AQgJIwIAAABrAAkmAgQACjsJAAoAKAQCCAA4CAEJLA0JBS8MAAUABgA4AQcFDjgBBQYjAgAAAHQABiYCBAAIOwkACCwMBQEiAAAAYCwNAwkmAgQHCww4AQsMIwIAAAB8AAwmAgQADTsJAA0AKAYCCwA4CwEMLA0MChwMAAoLJgIECQwMOAEMDSMCAAAAhQANJgIEAA47CQAOLQQACYADJwAEAAqABCQAAACaLQiABQAKACgKAgwAOAwBDSwOCw0AOAEHCQ44AQkLIwIAAACRAAsmAgQADDsJAAwsDgoDLAwJASIAAABHJwAEeACABA0AAACABIADIwAAAACZgAMnAAQAAIAEPAEAAIAEJS0BgAOABgsAgAYAAoAHIwAAAACegAciAAAAoC0AgAOABSIAAACuLQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwAAAACsgAwtAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAAAKUnAQQAAYAFIgAAAK4lLQAYyhjK","debug_symbols":"1ZzbiuJAFEX/Jc8+VNWpq78yNI12axMQbdQeGMR/n+hYMRPtc1602edFEt2klrmtgmxyaN4X86+P13a93Oya6a9Ds9q8zfbtZt2tHY6TZr5tV6v243X4dWNOH+Uc333O1qe13X623TdTG4uZNIv1e7eYjOk2sGxXi2aawnFyGzYm1LBxoQ/bUO6kKVPddLdY+nRJd8KRfLyEI0U3DL9MGmsewJ5dDXfwP8huH8Dubb/fo7Tfrcu+pskbnj1Fly7hFJMZs7uHslvzP/tpBHr6CP7pI4SnjxDvjpBzfzkWk4URqD/QlgJdR8j2TjoUUy7pUJznzyFKVMOUBptO7syeFLNnxexFL7szitmtYnanmJ0Us3vF7EExu2KvOsVedYq96hR7lRR7lRR7lRR7lRR7lRR7lRR7lRR7lRR7lRR7lRR71Sv2qlfsVa/Yq16xV71ir3rFXk3Y12r2ubLn6Mfs2OdMztSzFzdmhz5nvLGV3RtKY3bouZjADj0XE9ih52ICO/RcjGfP0HMxgR36/i6wQ8/FBHbouZjADu1VgV2xVzO4V2Pu2Uscs4N7lWUH9yrLDu5Vjr2Ae5VlB/cqy/7j95mcalMu5CKwhxhr2axbDMPwy6m3Z6Dh0/UoJVtu4C32ni+eg3fYe97ZHp5uaoeGNMN7zfBBMzz2rVKAT5rhs2b4ohjeYhs2ZnOFt3y4eFv/afHhtkcPruNv/+kZHlvHAjy2jgV4bB0L8Ng6FuCx2wjs0yoLXp/PpXJQcXYMD96fF+DBH3Ly8NiNBAEeu5IgwHvN8NilBAEeu+0nwGPX/Ybwg8l/hQc3LNepsOBFeh4evEkvwIMblocHNywPD25YHh7csDw8uGF5eHDD8vDghuXhNRsWvFLPw4N36gV4zYYFb9UL8JoNC96rF+DVGvbYrf2ebdvZfLW4vEZp+bV+G7xVaf/n898vXfgv","brillig_names":["initialize_deck"],"assert_messages":{"144":"attempt to add with overflow","152":"Stack too deep","106":"Array index out of bounds","15":"Not initialized","132":"Array index out of bounds","115":"attempt to add with overflow","123":"Array index out of bounds"}},{"name":"view_deck","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"drawn_cards_bitmap","type":{"kind":"array","length":7,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"deck_seed","type":{"kind":"field"}},{"name":"draw_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"CardNote::CardNote::Deck"},"visibility":"public"}},"bytecode":"JgAEAQInAASATAABJgAEAwAmAgQAASYCBAACHxgAAgABgEMkAAAAEQAoAQIEJwIEgEMABSYCBAcGLQQABIADLQQABYAELQQABoAFJAAAAK0tBAACgEotBAADgEs6AIBDAAkkAAAAuB4CAAACHgIAAAMyOAACAAMABCYCAQECIwIAAAAZAAQmAgQAAzsJAAMeAgoAAiYCAAEDCjgCAwQjAgAAAB8ABCYCBAAFOwkABSYCAAACLAgBBCYCBAoFABABBQEmAwQBBAAoBAIFLAwFBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYAKAYCBiwOAgYsDQQFACgFAgUsDgUELAgBBQAAAQIBLA4EBSYCBAACJgIEAQQmAgQJBiwMAgEiAAAAQgw4AQYHIwIAAACVAAciAAAARSwNBQMmAgIABSwIAQYmAgQIBwAQAQcBJgMEAQYAKAYCBywMBwgsDgUIACgIAggsDgUIACgIAggsDgUIACgIAggsDgUIACgIAggsDgUIACgIAggsDgUIACgIAggsDgUILA0GBwAoBwIHLA4HBiwIAQcAAAECASwOBgcmAgQHBSwMAgEiAAAAYww4AQUCIwIAAAB1AAIiAAAAZgAoAwICADgCBQQsDQQBJgIECAIAKAMCBQA4BQIGLA0GBBwMBAQDHAwAAwIcDAQCAywNBwIsDAEELAwCASwMBAIlLA0HAiYCBAkIDDgBCAkjAgAAAHsACSYCBAAKOwkACgAoAwIIADgIAQksDQkGHAwCBgkcDAAJCBwMAggGJgIEBwkMOAEJCiMCAAAAhgAKJgIEAAs7CQALLQQAAoADJwAEAAiABCQAAAC+LQiABQAIACgIAgkAOAkBCiwOBgoAOAEEAg44AQIGIwIAAACSAAYmAgQACTsJAAksDggHLAwCASIAAABjLA0FBxwMAAEIADgDCAkuDAAJAAgmAgQJCgw4AQoLIwIAAACeAAsmAgQADDsJAAwtBAAHgAMnAAQACoAEJAAAAL4tCIAFAAkAKAkCCgA4CgELLA4ICwA4AQQHDjgBBwgjAgAAAKoACCYCBAAKOwkACiwOCQUsDAcBIgAAAEIBAIADgAWABy0AgAOACC0AgASACQsAgAiAB4AKIwAAAAC3gAotAYAIgAYtAoAGgAkBAIAIAAKACAEAgAkAAoAJIgAAALAlJwAEeACABA0AAACABIADIwAAAAC9gAMnAAQAAIAEPAEAAIAEJS0BgAOABgsAgAYAAoAHIwAAAADCgAciAAAAxC0AgAOABSIAAADSLQAAAYAFAQAAAYAEAAEBAIADgASACS0AgAOACi0AgAWACwsAgAqACYAMIwAAAADQgAwtAYAKgAgtAoAIgAsBAIAKAAKACgEAgAsAAoALIgAAAMknAQQAAYAFIgAAANIlLQAYyhjK","debug_symbols":"1ZzdThsxEEbfZa9zYXtm7DGvUlVVgIAiRQFBqFQh3r0birdpNhoLGtB8N2iXzMYn8c8ZyRk/D9ery6fbH+vtzd3jcPHtedjcXS1367vtePf8shguH9abzfr2x+G/h7D/E/U1/vF+ud3fPu6WD7vhIuYaFsNqez1elhDGd7hZb1bDRZGXxTw4BGnBIckUHKWeiCal9tbjZZ2iazkRnInzW3CmnA6Dvy+GWM/ArqkFj/Bfx57CGdg5Tt977n3vMSm3aOJgs5ecyltwySUcs8ezssfwL/u+hfTpLdCnt8Cf3oL8dwsSYxsVEqk3KlLVNiooxeNRkd9Js3+mfOAZ/cAz9f3PUPjAMydnRkqxrQQpkXb6PDJNfZ7/BkeNp/pPQpuoIknt/pMkbbEbL+mo/ygBsxMwOwOzCzB7BmYvwOwKzF5x2TkAswN7lYG9ysBeZWCvMrBXGdirDOxVBvYqA3tVgL0qwF4VYK8KsFcF2KsC7FUB9qoAe1WAvSrAXs3AXs3O52qpE7se7+5k52Omts1GoXC8B1G+fMxwnYaBMNnsTNS2c8bLA470yh6B2RMwOwGzMzC7ALNnYPYCzK7A7BWXXYG9qsBeVWCvKrBXFdirCuxVBfaqAntVgb2qwF6twF6twF6twF6twF6twF6twF6tvtdInn5Wz8z5iD0G35M1h/YLas5JZ/C+Z2sH3vd07cD7nq85T/M1a53B+06EO/C+M+EOvO9UuAPve50/hK+zdT76ToY78L6z4Q68c8Pa8L5XGzu3ib5XG9Y6wdeZYaPzrNKET75Xmw6879WmA+97tenA+87nO/CMDO87n+/A+87nD+Al8AzeuWFteBjDnoJ3btgs05jXWW5Dzg1rwzs3rA3v3LA2vHPD2vDODWvDOzesDe/csDa8c8Pa8M4Na8MjG5aRDcvIhmVkwzKyYb++rPuc8MiGZWTDeq8wtipyovMSY6Kpm4hnh/Q5rzGmWCx430XGNO2Aj/CdCVIptG6qRDL7pM5Lkq2yr+i9JtmGd16UbMM7r3S04Z2XJdvwzuuSbXjgItPovTLZhnd+5IcN7/zMDxse2bAZ2bAZ2bDezxKw4ZENm5ENi3yMQyywhn0Z734uH9bLy83q7fD9m6ft1cFZ/Ltf939eGYN/Aw==","brillig_names":["view_deck"],"assert_messages":{"157":"Array index out of bounds","122":"Array index out of bounds","145":"attempt to add with overflow","30":"Function view_deck can only be called statically","24":"Not initialized","133":"Array index out of bounds","188":"Stack too deep","169":"attempt to add with overflow"}},{"name":"dealer_hand","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"cards","type":{"fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}],"kind":"struct","path":"CardNote::CardNote::Card"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"}},{"name":"bust","type":{"kind":"boolean"}}],"kind":"struct","path":"CardNote::CardNote::Hand"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Zzdbts4EIXfxde5IIcc/uRVFovCadPCgOEUibvAIsi7V3Yj2bFcEk4ZY86wN4Edj6TzUbTOkWTN8+LL/d2Pb59Wm68PT4vbf54X64fPy+3qYTO8e365Wdw9rtbr1bdPx/9emN0fm/b1T9+Xm93bp+3ycbu4tSGbm8X95svwMhozrOHran2/uI38cjMvNobHYkM8FVvOZ6pdcuOqh5d5qs7xTHFwPrwWBxfouPjfm4XNDbQnGosH8dfTTqaBdm+ncQ+1cbeU/FjtvClrj4Hia3EM0Zxqt021W/NW+24L9OFbcB++Bf/hW+A/3gJbO84Ktq42KyincVY4sqezIlyoZrdMfMcy6R3L5MuXceYdy5z/ZuQ0jhsZS5V9br2b9nlIh32e7Ln9x2b8ojJTKu8/Jh4PdsNLd7L/HAFrd8DaPbB2BtYegLVHYO0JWHvG1e4NsHZgX/XAvuqBfdUD+6oH9lUP7Kse2Fc9sK96YF9lYF9lYF9lYF9lYF9lYF8Nwud7zJP2dHrVNQgf9zzeBGBnTq8NhqvnGZ+nacDelbWTd+NlVvL+sOpIe+0BWHsE1p6AtWdc7dEAa7fA2glYuwPW7oG1A/tqBPbVCOyrEdhXI7CvJmBfTcC+moB9NQH7agL21QTsqwnYVxOwryZgX03AvpqBfTUD+2oG9tUM7KsZ2FczsK9mYF/NwL6agX01A/uqNcDGag2ws1oDbK3WyJ7zTONTOcPt4Zl4K3vkgx9vslJgnomXnWoq4mXbK4c8TZs4nzay/bUiXrbBVsQLP9oUxZNsh62Il+2wFfGyj/MV8bKP8xXxXrb4PIkPRDPxss9fK+JlH+cDT8EsxHws/owOY0dSa1woF1N2U/DIfPhpGoVzmk0awy2bnI+L92Mo224gxtDJdj2MMZRtvhhjKPxcD2IMhZ9yQoyh/zuGfzyGsoMZxhjKvgKDMYayLwRhjKGm85RwaI31tnhPqulsokjqNWX+MqmmZH5EmsKMVFN+zmcbbY2kmlJumdR3Q6opMR6R2tl1P68p1x26rw23fmakmtJX8CVSVRmpSKoqI5VIWVVGKpKqykhFUk0ZKRx00MxPWVNGKpP6bkgVZSTLh0bPYXYuw4oyUoVUUUaqkCrKSMek0c1IFWUkG9OkI8/OZYKijFQhVZSRKqSKMtIb0lkaDIoyko1jcyhLZnbsvX6zqo889toSqaqMVCRVlZGKpKoyUpFUVUYqkmrKSDxdBSVrT0mFN/BqSaopI5VJNWWkMqmijERuSoPEc1KviJSn34pQnCV84W3Kfv9g2pk1l3+7Iryp2SWkIdlxzSHR0QT4BSo8IrUDFZ6Q2oEKD0jNQIU3YmsIKjwetQNFfWr7YlDUJ7zPgU63nkJKfArqewHVE40qoJqSURFUUzIqgmpKRkVQTcmoBCq8lV5DUE3JqAiqKRkVQXtJRsLb/zUE7SUZCW8s2BC0l2QkvGVhQ9BOkhEJ74XYELSTZETCeyw2BO0kGZHxvYB2kozIdJKMyHSSjMh0koxIeBfcdqC2l2Rke0lGsD2QLwbtJRlZ3wtoL8lIeLfshqC9JCPhXbgvAs1m+g1DtjNQRcmoCCq8u3dDUEXJqAyqKBmVQRUlozKo7wUUNTDsxaOGgL14VGPfi0c165146Y3Gy+KvfghmEyfxlMrimeL4wMdQa46L9+K9aPHOTbvJeZqJZ9nibSyJD7LFG38QX/mCZDcZWnaOZ6RR9hck80Rq7Ex8QhafgcVfvxNtS/EWWTwhixdux2Xxsu24Il62HVfEy7bjinhkh/XIDuuRHZaRHZaRHZaRHZaRHfb6PUFbiX8Z3v23fFwt79b3T8Myuw9/bD5vVw+b17fb/7//+mQo/gk=","brillig_names":["dealer_hand"],"assert_messages":{"253":"attempt to add with overflow","151":"attempt to add with overflow","241":"Array index out of bounds","168":"attempt to add with overflow","191":"attempt to multiply with overflow","179":"push out of bounds","208":"attempt to add with overflow","272":"Stack too deep","196":"Array index out of bounds","30":"Function dealer_hand can only be called statically","222":"attempt to add with overflow","24":"Not initialized","120":"Array index out of bounds","213":"Array index out of bounds","230":"attempt to add with overflow"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"BlackJack"}},{"name":"fields","value":{"fields":[{"name":"card_deck","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"player_hands","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}],"kind":"struct"}},{"name":"dealer_hand","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000b"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"player","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"BlackJack::player_hand_parameters"}},{"name":"return_type","type":{"fields":[{"name":"cards","type":{"fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}],"kind":"struct","path":"CardNote::CardNote::Card"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"}},{"name":"bust","type":{"kind":"boolean"}}],"kind":"struct","path":"CardNote::CardNote::Hand"}}],"kind":"struct","path":"BlackJack::player_hand_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"player","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"BlackJack::constructor_parameters"}}],"kind":"struct","path":"BlackJack::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"BlackJack::initialize_deck_parameters"}}],"kind":"struct","path":"BlackJack::initialize_deck_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"BlackJack::view_deck_parameters"}},{"name":"return_type","type":{"fields":[{"name":"drawn_cards_bitmap","type":{"kind":"array","length":7,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"deck_seed","type":{"kind":"field"}},{"name":"draw_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"CardNote::CardNote::Deck"}}],"kind":"struct","path":"BlackJack::view_deck_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"BlackJack::dealer_hand_parameters"}},{"name":"return_type","type":{"fields":[{"name":"cards","type":{"fields":[{"name":"storage","type":{"kind":"array","length":6,"type":{"fields":[{"name":"rank","type":{"kind":"field"}},{"name":"suit","type":{"kind":"field"}}],"kind":"struct","path":"CardNote::CardNote::Card"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"}},{"name":"bust","type":{"kind":"boolean"}}],"kind":"struct","path":"CardNote::CardNote::Hand"}}],"kind":"struct","path":"BlackJack::dealer_hand_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"player","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"BlackJack::begin_game_parameters"}}],"kind":"struct","path":"BlackJack::begin_game_abi"}]}},"file_map":{"119":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"124":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"132":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    let (member, exists) = get_contract_instance_deployer_internal_avm(address);\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    let (member, exists) = get_contract_instance_class_id_internal_avm(address);\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    let (member, exists) = get_contract_instance_initialization_hash_internal_avm(address);\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"},"159":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"160":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"165":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"173":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    storage::map::derive_storage_slot_in_map,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"181":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"223":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"303":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"305":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"306":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"312":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    },\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"},"313":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n    utils,\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    ec::{pow, sqrt},\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"315":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"316":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"320":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::default::Default;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"322":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedEncryptedLogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__VK,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    proof::verification_key::VerificationKey,\n    traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"323":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Serialize}};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"340":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    context::PrivateContext,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    },\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator, traits::Serialize,\n    },\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash: Field = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"72":{"path":"/Users/niallcheetham/Dev/aztec/blackjack/blackjack/src/CardNote.nr","source":"// CardNote.nr\npub mod CardNote {\n    use dep::aztec::{\n        oracle::random::random,\n        prelude::{PublicContext, PublicMutable},\n        protocol_types::{\n            address::AztecAddress,\n            constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n            traits::{Deserialize, FromField, Serialize, ToField},\n        },\n    };\n    use std::hash::poseidon2;\n\n    global MAX_CARDS_IN_HAND: u32 = 6;\n    global BITS_PER_FIELD: u32 = 255;\n    global TOTAL_CARDS: u32 = 52;\n    global FIELDS_FOR_DECK: u32 = 7;\n    global MAX_DRAW_ATTEMPTS: u32 = 5;\n    global BITS_PER_BYTE: u32 = 8;\n    global NUM_BITMAP_BYTES: u32 = (TOTAL_CARDS + BITS_PER_BYTE - 1) / BITS_PER_BYTE; // 7 bytes\n\n    //-------------------------------CARD-----------------------------------\n\n    #[derive(Serialize)]\n    #[derive(Deserialize)]\n    pub struct Card {\n        pub rank: Field,\n        pub suit: Field,\n    }\n\n    impl FromField for Card {\n        fn from_field(field: Field) -> Card {\n            let value_bytes: [u8; 32] = field.to_le_bytes();\n            let rank = ((value_bytes[0] as u32) + (value_bytes[1] as u32) * 256) % 14;\n            let suit = ((value_bytes[2] as u32) + (value_bytes[3] as u32) * 256) % 4;\n            Card { rank: rank as Field, suit: suit as Field }\n        }\n    }\n\n    impl ToField for Card {\n        fn to_field(self) -> Field {\n            self.rank as Field + self.suit as Field * 65536\n        }\n    }\n\n    fn card_id(rank: u8, suit: u8) -> u8 {\n        (suit as u8) * 13 + (rank as u8) - 1 // Ranks from 1 to 13\n    }\n\n    fn id_to_card(card_id: u8) -> Card {\n        let rank = (card_id % 13) + 1;\n        let suit = card_id / 13;\n        Card { rank: rank as Field, suit: suit as Field }\n    }\n\n    //-------------------------------HAND-----------------------------------\n\n    pub struct Hand {\n        cards: BoundedVec<Card, MAX_CARDS_IN_HAND>,\n        bust: bool,\n    }\n\n    impl Serialize<MAX_CARDS_IN_HAND> for Hand {\n        fn serialize(self) -> [Field; MAX_CARDS_IN_HAND] {\n            let mut fields = [Field::empty(); MAX_CARDS_IN_HAND];\n            //only serialize the cards that exist\n            for i in 0..self.cards.len() {\n                fields[i] = self.cards.get(i).to_field();\n            }\n            fields\n        }\n    }\n\n    impl Deserialize<MAX_CARDS_IN_HAND> for Hand {\n        fn deserialize(fields: [Field; MAX_CARDS_IN_HAND]) -> Self {\n            let mut cards = BoundedVec::new();\n            //only deserialize the non empty fields\n            for i in 0..fields.len() {\n                let field = fields[i];\n                if field != Field::empty() {\n                    cards.push(Card::from_field(field));\n                }\n            }\n            Hand { cards, bust: false }\n        }\n    }\n\n    impl ToField for Hand {\n        fn to_field(self) -> Field {\n            // Serialize the cards array into fields\n            let mut card_fields = [Field::empty(); MAX_CARDS_IN_HAND];\n            for i in 0..self.cards.len() {\n                card_fields[i] = self.cards.get(i).to_field();\n            }\n\n            // Hash the serialized data\n            poseidon2::Poseidon2::hash(card_fields, MAX_CARDS_IN_HAND)\n        }\n    }\n\n    pub fn new_hand() -> Hand {\n        Hand { cards: BoundedVec::new(), bust: false }\n    }\n\n    //-------------------------------DECK-----------------------------------\n    pub struct Deck {\n        // Bitmask to track used cards\n        drawn_cards_bitmap: [u8; NUM_BITMAP_BYTES],\n        deck_seed: Field,\n        draw_counter: u32,\n    }\n\n    impl Serialize<NUM_BITMAP_BYTES + 2> for Deck { // Implement Serialize with explicit size\n        fn serialize(self) -> [Field; NUM_BITMAP_BYTES + 2] {\n            let mut fields = [Field::empty(); NUM_BITMAP_BYTES + 2];\n            // Use first 5 indices for bitmap\n            for i in 0..NUM_BITMAP_BYTES {\n                fields[i] = self.drawn_cards_bitmap[i] as Field;\n            }\n            // Use last 2 indices for seed and counter\n            fields[NUM_BITMAP_BYTES] = self.deck_seed;\n            fields[NUM_BITMAP_BYTES + 1] = self.draw_counter as Field;\n            fields\n        }\n    }\n\n    impl Deserialize<NUM_BITMAP_BYTES + 2> for Deck {\n        fn deserialize(fields: [Field; NUM_BITMAP_BYTES + 2]) -> Self {\n            let mut drawn_cards_bitmap = [0 as u8; NUM_BITMAP_BYTES];\n            // Get bitmap from first 5 indices\n            for i in 0..NUM_BITMAP_BYTES {\n                drawn_cards_bitmap[i] = fields[i] as u8;\n            }\n            // Get seed and counter from last 2 indices\n            let deck_seed = fields[NUM_BITMAP_BYTES];\n            let draw_counter = fields[NUM_BITMAP_BYTES + 1] as u32;\n            Deck { drawn_cards_bitmap, deck_seed, draw_counter }\n        }\n    }\n\n    impl Deck {\n        fn new(deck_seed: Field) -> Self {\n            // Initialize with all zeros\n            let drawn_cards_bitmap = [0 as u8; NUM_BITMAP_BYTES];\n            let draw_counter = 0;\n\n            Self { drawn_cards_bitmap, deck_seed, draw_counter }\n        }\n    }\n\n    impl ToField for Deck {\n        fn to_field(self) -> Field {\n            let mut card_fields = [Field::empty(); FIELDS_FOR_DECK];\n            for i in 0..self.drawn_cards_bitmap.len() {\n                card_fields[i] = self.drawn_cards_bitmap[i].to_field();\n            }\n            card_fields[FIELDS_FOR_DECK] = self.deck_seed;\n            card_fields[(FIELDS_FOR_DECK + 1)] = self.draw_counter.to_field();\n            // Hash all card fields into a single Field\n            poseidon2::Poseidon2::hash(card_fields, FIELDS_FOR_DECK)\n        }\n    }\n\n    //-------------------------------BITMASK UTILITIES-----------------------------------\n    fn is_card_used(deck: &mut Deck, card_index: u8) -> bool {\n        assert(card_index as u32 < TOTAL_CARDS as u32); // Ensure valid card index\n        let field_index = (card_index / 8) as u32;\n        assert(field_index as u32 < FIELDS_FOR_DECK as u32); // Ensure valid field index\n        let bit_index = card_index % 8;\n        let current_field = deck.drawn_cards_bitmap[field_index as u8];\n        (current_field & (1 << bit_index)) != 0\n    }\n\n    fn set_card_used(deck: &mut Deck, card_index: u8) {\n        assert(card_index as u32 < TOTAL_CARDS as u32); // Ensure valid card index\n        let field_index = (card_index / 8) as u32;\n        assert(field_index < FIELDS_FOR_DECK as u32); // Ensure valid field index\n        let bit_index = card_index % 8;\n        let mut current_value = deck.drawn_cards_bitmap[field_index as u8];\n        current_value |= 1 << bit_index;\n        deck.drawn_cards_bitmap[field_index as u8] = current_value;\n    }\n\n    //---------------------------FIESTEL NETWORK-----------------------------------\n\n    fn feistel_network(seed: Field, input: u64) -> u64 {\n        let mut left = (input) & 0xFFFF_FFFF;\n        let mut right = (input >> 32) & 0xFFFF_FFFF;\n\n        // Round 1\n        let temp = right;\n        right = left ^ (feistel_function(right, seed, 0)) as u64;\n        left = temp;\n\n        // Round 2\n        let temp = right;\n        right = left ^ (feistel_function(right, seed, 1)) as u64;\n        left = temp;\n\n        // Round 3\n        let temp = right;\n        right = left ^ (feistel_function(right, seed, 2)) as u64;\n        left = temp;\n\n        // Combine left and right\n        let output = (left << 32) | right;\n        // Map output to 0..51\n        (output % 52) as u64\n    }\n\n    fn feistel_function(value: u64, seed: Field, round: u32) -> Field {\n        let value_field = value as Field;\n        poseidon2::Poseidon2::hash([value_field, seed, round.to_field()], 3)\n    }\n\n    //-------------------------------DRAW CARD-----------------------------------\n\n    pub fn generate_card(deck_seed: Field, draw_counter: u64) -> Card {\n        let card_index = feistel_network(deck_seed, draw_counter);\n        id_to_card(card_index as u8)\n    }\n\n    pub fn draw_card(mut deck: Deck) -> (Card, Deck) {\n        let mut card_index = 0;\n        let mut unique_card_found = false;\n        let mut final_counter = 0;\n\n        // Instead of breaking, we'll use the first valid card we find\n        for attempt in 0..MAX_DRAW_ATTEMPTS {\n            if !unique_card_found {\n                // Only process if we haven't found a card yet\n                let current_draw_counter = deck.draw_counter + attempt;\n                let current_card_index =\n                    feistel_network(deck.deck_seed, current_draw_counter as u64) as u8;\n\n                if !is_card_used(&mut deck, current_card_index) {\n                    // Found a valid card\n                    card_index = current_card_index;\n                    final_counter = current_draw_counter + 1;\n                    unique_card_found = true;\n\n                    set_card_used(&mut deck, card_index);\n                }\n            }\n        }\n\n        // Update the counter after the loop\n        if unique_card_found {\n            deck.draw_counter = final_counter;\n        } else {\n            deck.draw_counter = deck.draw_counter + MAX_DRAW_ATTEMPTS;\n        }\n\n        let card = if unique_card_found {\n            id_to_card(card_index)\n        } else {\n            Card { rank: 0.to_field(), suit: 0.to_field() }\n        };\n\n        (card, deck)\n    }\n\n    //-------------------------------CARD FUNCTIONS-----------------------------------\n\n    pub fn start_game(\n        deck: &mut Deck,\n        player_hand: &mut Hand,\n        dealer_hand: &mut Hand,\n        // card_deck_storage: PublicMutable<Deck, &mut PublicContext>,\n    ) -> (Hand, Hand, &mut Deck) {\n        // Draw two cards for the player\n        player_hand.cards = BoundedVec::new();\n        dealer_hand.cards = BoundedVec::new();\n\n        //draw two cards for the player\n        let (card1, updated_deck) = draw_card(*deck);\n        player_hand.cards.push(card1);\n        let (card2, updated_deck) = draw_card(updated_deck);\n        player_hand.cards.push(card2);\n\n        // Draw one card for the dealer (face-up)\n        let (dealer_card, final_deck) = draw_card(updated_deck);\n        dealer_hand.cards.push(dealer_card);\n\n        (*player_hand, *dealer_hand, deck)\n    }\n\n    // pub fn player_hit1(deck: &mut Deck, player_hand: &mut Hand) -> bool {\n    //     if let Some(card) = draw_card(deck) {\n    //         player_hand.cards.push(card);\n    //         // Check if player busts\n    //         check_bust(player_hand)\n    //     } else {\n    //         // Handle no more cards scenario\n    //         true // Assuming player busts if no more cards can be drawn\n    //     }\n    // }\n\n    pub fn player_hit(deck: &mut Deck, player_hand: &mut Hand) -> bool {\n        // Draw a new card\n        let (card, deck) = draw_card(*deck);\n        player_hand.cards.push(card);\n\n        // Check if player busts\n        check_bust(player_hand)\n    }\n\n    pub fn dealer_play(deck: &mut Deck, dealer_hand: &mut Hand) {\n        // Dealer must hit until the hand value is 17 or more\n        //need to make this a loop without while loop\n        if hand_points(dealer_hand) as u8 < 17 {\n            let (card, deck) = draw_card(*deck);\n            dealer_hand.cards.push(card);\n        }\n    }\n\n    fn card_points(card: Card) -> Field {\n        if (card.rank as u8 > 1) & (card.rank as u8 <= 10) {\n            card.rank\n        } else if card.rank == 1 {\n            11.to_field() // Ace as 11 initially\n        } else {\n            10.to_field() //Face cards (J,Q,K)\n        }\n    }\n\n    pub fn determine_winner(player_hand: &mut Hand, dealer_hand: &mut Hand) -> Field {\n        let player_points = hand_points(player_hand) as u8;\n        let dealer_points = hand_points(dealer_hand) as u8;\n\n        let player_bust = check_bust(player_hand);\n        let dealer_bust = check_bust(dealer_hand);\n\n        //player wins = 0\n        //dealer wins = 1\n        //push = 2\n        if player_bust {\n            1.to_field()\n        } else if dealer_bust {\n            0.to_field()\n        } else if player_points > dealer_points {\n            0.to_field()\n        } else if dealer_points > player_points {\n            1.to_field()\n        } else {\n            2.to_field()\n        }\n    }\n\n    pub fn hand_points(hand: &mut Hand) -> Field {\n        let mut points = 0;\n        let mut aces = 0;\n\n        // First pass: Calculate initial points and count the number of Aces.\n        for i in 0..hand.cards.len() {\n            let card_point = card_points(hand.cards.get(i));\n            if card_point == Field::from(11) {\n                aces += 1;\n            }\n            points += card_point;\n        }\n\n        // Adjust for Aces if points exceed 21.\n        // Adjust for Aces if points exceed 21.\n        let max_points = 21;\n        if (points as u8 > max_points) & (aces > 0) {\n            points = points - 10; // Adjust one Ace from 11 to 1\n        }\n        if (points as u8 > max_points) & (aces > 1) {\n            points = points - 10; // Adjust second Ace if needed\n        }\n        if (points as u8 > max_points) & (aces > 2) {\n            points = points - 10; // Adjust third Ace if needed\n        }\n\n        // The above conditions effectively handle up to 4 Aces in a hand.\n        points\n    }\n\n    pub fn check_bust(hand: &mut Hand) -> bool {\n        hand_points(hand) as u8 > 21\n    }\n\n    // pub fn generate_deck() -> Deck {\n    //     let mut deck: Deck = Deck { drawn_cards_bitmap: [0.to_field(); FIELDS_FOR_DECK] };\n\n    //     let mut index = 0;\n    //     for suit in 1..=4 {\n    //         for rank in 1..=13 {\n    //             let card_index = card_id(rank as u8, suit as u8);\n    //             set_card_used(&mut deck, card_index);\n    //         }\n    //     }\n    //     deck\n    // }\n\n}\n\n"},"75":{"path":"/Users/niallcheetham/Dev/aztec/blackjack/blackjack/src/main.nr","source":"//functionality that i need:\n\n//make it super simple to start similar to kits\n\n// Player hits/stands to beat dealer's hand by getting as close to 21 as possible.\n\n// Dealer must hit on and up to 16 and stand on 17.\n\n// Player can only double down on 9, 10, or 11.\n\n// Player can either double down or split, player cannot split then double down and vice versa.\n\n// Player cannot split then split again or double down more than once.\n\n// Player who splits Aces can receive only one more additional card on a hand.\n\n// Player can get insurance if dealer might have a BlackJack.\n\n// Aces are high unless card total is already greater than 11.\n\n// Blackjack payout is 3:2.\n\n// No surrender.\n\n//some finds here\n//i had to use my own serialisation and deserialisation for the deck, default ones were not working\n\nmod CardNote;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract BlackJack {\n\n    use crate::CardNote::CardNote::{\n        Card, check_bust, Deck, draw_card, Hand, hand_points, new_hand, start_game,\n    };\n    use dep::aztec::{\n        context::PublicContext,\n        macros::{functions::{initializer, private, public, view}, storage::storage},\n        prelude::{AztecAddress, Map, PrivateMutable, PublicImmutable, PublicMutable},\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        card_deck: PublicMutable<Deck, Context>,\n        player_hands: Map<AztecAddress, PublicMutable<Hand, Context>, Context>,\n        dealer_hand: PublicMutable<Hand, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor(player: AztecAddress) {\n        // let mut deck = Deck::new(); // Start with an empty deck\n        // storage.card_deck.write(deck);\n    }\n\n    //this is just because the constructor is private\n    #[public]\n    fn initialize_deck() {\n        let deck_seed = 42;\n        let mut deck = Deck::new(deck_seed); // Start with an empty deck\n        storage.card_deck.write(deck);\n    }\n\n    #[public]\n    #[view]\n    fn dealer_hand() -> Hand {\n        storage.dealer_hand.read()\n    }\n\n    #[public]\n    #[view]\n    fn player_hand(player: AztecAddress) -> Hand {\n        storage.player_hands.at(player).read()\n    }\n\n    #[public]\n    #[view]\n    fn view_deck() -> Deck {\n        storage.card_deck.read()\n    }\n\n    #[public]\n    fn begin_game(player: AztecAddress) {\n        //read existing\n        let mut deck = storage.card_deck.read();\n\n        let mut player_hand = new_hand();\n        let mut dealer_hand = new_hand();\n        // let mut card_deck_storage = storage.card_deck;\n        // let (updated_player_hand, updated_dealer_hand) = start_game(\n        //     &mut deck,\n        //     &mut player_hand,\n        //     &mut dealer_hand,\n        //     // card_deck_storage,\n        // );\n        // Draw cards and update deck with returned values\n        let (card1, updated_deck) = draw_card(deck);\n        let (card2, updated_deck2) = draw_card(updated_deck);\n        let (dealer_card, final_deck) = draw_card(updated_deck2);\n\n        player_hand.cards.push(card1);\n        player_hand.cards.push(card2);\n        dealer_hand.cards.push(dealer_card);\n\n        //store the deck\n        storage.card_deck.write(final_deck);\n        //store the hands\n        storage.player_hands.at(player).write(player_hand);\n        storage.dealer_hand.write(dealer_hand);\n    }\n\n    // #[public]\n    // fn player_hit(player: AztecAddress) {\n    //     let mut deck = storage.card_deck.modify();\n    //     let mut player_hand = storage.player_hands.at(player).modify();\n\n    //     // Draw a new card\n    //     player_hand.cards[player_hand.card_count.to_u32()] = draw_card(deck, deck.drawn_count);\n    //     deck.drawn_count += 1;\n    //     player_hand.card_count += 1;\n\n    //     // Check if player busts\n    //     if check_bust(player_hand) {\n    //         // Handle bust (e.g., end game, declare dealer winner)\n    //         // Implement game over logic here\n    //     }\n\n    //     // Update the player's hand in storage\n    //     storage.player_hands.at(player).write(player_hand);\n    // }\n\n    // #[public]\n    // fn player_stand(player: AztecAddress) {\n    //     // Proceed to dealer's turn\n    //     dealer_play(player);\n    // }\n\n    // #[public]\n    // fn dealer_play(player: AztecAddress) {\n    // let mut deck = storage.card_deck.modify();\n    // let mut dealer_hand = storage.dealer_hand.modify();\n\n    // // Reveal the dealer's hole card\n    // dealer_hand.cards[1] = draw_card(deck, deck.drawn_count);\n    // deck.drawn_count += 1;\n    // dealer_hand.card_count = 2;\n\n    // // Dealer must hit until the hand value is 17 or more\n    // while hand_points(dealer_hand).to_u32() < 17 {\n    //     dealer_hand.cards[dealer_hand.card_count.to_u32()] = draw_card(deck, deck.drawn_count);\n    //     deck.drawn_count += 1;\n    //     dealer_hand.card_count += 1;\n    // }\n\n    // // Update the dealer's hand in storage\n    // storage.dealer_hand.write(dealer_hand);\n\n    // // Determine the outcome\n    // determine_winner(player);\n    // }\n\n    // fn determine_winner(player: AztecAddress) {\n    // let player_hand = storage.player_hands.at(player).read();\n    // let dealer_hand = storage.dealer_hand.read();\n\n    // let player_points = hand_points(player_hand).to_u32();\n    // let dealer_points = hand_points(dealer_hand).to_u32();\n\n    // let player_bust = check_bust(player_hand);\n    // let dealer_bust = check_bust(dealer_hand);\n\n    // let outcome: &str;\n\n    // if player_bust {\n    //     outcome = \"Player busts. Dealer wins.\";\n    // } else if dealer_bust {\n    //     outcome = \"Dealer busts. Player wins!\";\n    // } else if player_points > dealer_points {\n    //     outcome = \"Player wins!\";\n    // } else if dealer_points > player_points {\n    //     outcome = \"Dealer wins.\";\n    // } else {\n    //     outcome = \"Push (tie).\";\n    // }\n\n    // // Handle payouts and game over logic\n    // // Emit event or log outcome\n    // // For simplicity, you can store the outcome in storage or emit it using an event\n    // }\n\n    //     #[public]\n    //     fn player_double_down(player: AztecAddress) {\n    //         let mut deck = storage.card_deck.modify();\n    //         let mut player_hand = storage.player_hands.at(player).modify();\n\n    //         // Ensure player can only double down on 9, 10, or 11\n    //         let player_points = hand_points(player_hand).to_u32();\n    //         if player_points < 9 || player_points > 11 {\n    //             // Reject the action\n    //             // Emit error or revert transaction\n    //             return;\n    //         }\n\n    //         // Double the bet (implement bet logic separately)\n    //         // Take exactly one more card\n    //         player_hand.cards[player_hand.card_count.to_u32()] = draw_card(deck, deck.drawn_count);\n    //         deck.drawn_count += 1;\n    //         player_hand.card_count += 1;\n\n    //         // Update the player's hand in storage\n    //         storage.player_hands.at(player).write(player_hand);\n\n    //         // Proceed to dealer's turn\n    //         dealer_play(player);\n    //     }\n\n    //     pub fn hand_points(hand: Hand) -> Field {\n    //     let mut points = 0;\n    //     let mut aces = 0;\n\n    //     for i in 0..hand.card_count.to_u32() {\n    //         let card = hand.cards[i];\n    //         if card.rank == 1 {\n    //             aces += 1;\n    //             points += 11; // Assume Ace as 11 initially\n    //         } else if card.rank >= 10 {\n    //             points += 10;\n    //         } else {\n    //             points += card.rank;\n    //         }\n    //     }\n\n    //     // Adjust for aces if points exceed 21\n    //     while points > 21 && aces > 0 {\n    //         points -= 10; // Convert an Ace from 11 to 1\n    //         aces -= 1;\n    //     }\n\n    //     points\n    // }\n\n}\n"},"82":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n        compute_unique_note_hash,\n    },\n    utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"97":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Deserialize, Empty, Serialize};\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\n// TODO(9396): Remove.\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// TODO(9396): Remove.\n//unconstrained fn function_selector() -> u32 {\n//    function_selector_opcode()\n//}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert<let N: u32>(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// TODO(9396): Remove.\n//#[oracle(avmOpcodeFunctionSelector)]\n//unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"98":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.62.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        arguments,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        header::get_header_at,\n        key_validation_request::get_key_validation_request,\n        logs::{emit_encrypted_event_log, emit_encrypted_note_log},\n        returns::pack_returns,\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log_hash::{EncryptedLogHash, LogHash, NoteLogHash},\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_ENCRYPTED_LOGS_PER_CALL, MAX_KEY_VALIDATION_REQUESTS_PER_CALL,\n        MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    },\n    header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"}}}